{
    "language": "en",
    "type": "commands",
    "commands": [
        {
            "name": "about",
            "description": "Displays basic information about Drupal Console project",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "about",
            "dashed": "about",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "chain",
            "description": "Chain command execution",
            "options": {
                "file": {
                    "name": "file",
                    "description": "User defined file containing commands to get executed."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Providing a file option using full path. (DEPRECATED",
                    "execution": "drupal chain \\\n  --file=\"\/path\/to\/file\/chain-file.yml\"\n"
                }
            ],
            "aliases": [],
            "key": "chain",
            "dashed": "chain",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "check",
            "description": "System requirement checker",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "check",
            "dashed": "check",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "composerize",
            "description": "Converts Drupal codebase to composer.",
            "options": {
                "show-packages": {
                    "name": "show-packages",
                    "description": "Show list of packages."
                },
                "include-version": {
                    "name": "include-version",
                    "description": "Include version on suggested result command."
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "composerize",
            "dashed": "composerize",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "exec",
            "description": "Execute an external command.",
            "options": {
                "working-directory": {
                    "name": "working-directory",
                    "description": "The current working directory."
                }
            },
            "arguments": {
                "bin": {
                    "name": "bin",
                    "description": "Executable command."
                }
            },
            "examples": [],
            "aliases": [],
            "key": "exec",
            "dashed": "exec",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "help",
            "description": "Displays help for a command",
            "options": {
                "xml": {
                    "name": "xml",
                    "description": "To output list as XML"
                },
                "raw": {
                    "name": "raw",
                    "description": "To output raw command list"
                },
                "format": {
                    "name": "format",
                    "description": "The output format (txt, xml, json, or md)"
                }
            },
            "arguments": {
                "command_name": {
                    "name": "command_name",
                    "description": "The command name"
                }
            },
            "examples": [],
            "aliases": [],
            "key": "help",
            "dashed": "help",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "init",
            "description": "Copy configuration files.",
            "options": {
                "destination": {
                    "name": "destination",
                    "description": "Destination directory to copy files"
                },
                "site": {
                    "name": "site",
                    "description": "Use local site as destination."
                },
                "override": {
                    "name": "override",
                    "description": "Override configurations files flag"
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "description": "Autocomplete tool files flag."
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "init",
            "dashed": "init",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "list",
            "description": "Lists all available commands",
            "options": {
                "xml": {
                    "name": "xml",
                    "description": "To output list as XML"
                },
                "raw": {
                    "name": "raw",
                    "description": "To output raw command list"
                },
                "format": {
                    "name": "format",
                    "description": "The output format (txt, xml, json, or md)"
                }
            },
            "arguments": {
                "namespace": {
                    "name": "namespace",
                    "description": "The namespace name"
                }
            },
            "examples": [],
            "aliases": [],
            "key": "list",
            "dashed": "list",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "shell",
            "description": "Open a shell providing an interactive REPL (Read\u2013Eval\u2013Print-Loop).",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "shell",
            "dashed": "shell",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "server",
            "description": "Runs PHP built-in web server",
            "options": [],
            "arguments": {
                "address": {
                    "name": "address",
                    "description": "The address:port values"
                }
            },
            "examples": [
                {
                    "description": "Run using default address argument value 127.0.0.1:8088",
                    "execution": "drupal server"
                },
                {
                    "description": "Passing address argument to use a different port number",
                    "execution": "drupal server 127.0.0.1:8089"
                },
                {
                    "description": "Running default address argument values, using --root option to define the Drupal root",
                    "execution": "drupal --root=\/var\/www\/drupal8.dev server"
                }
            ],
            "aliases": [
                "serve",
                "rs"
            ],
            "key": "server",
            "dashed": "server",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "snippet",
            "description": "Runs PHP code",
            "options": {
                "file": {
                    "name": "file",
                    "description": "Path to the file"
                },
                "code": {
                    "name": "code",
                    "description": "Code to execute"
                },
                "show-code": {
                    "name": "show-code",
                    "description": "Show code after execute"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Run using a file.",
                    "execution": "drupal snippet --file=\/path\/to\/file"
                },
                {
                    "description": "Passing code as option.",
                    "execution": "drupal snippet --code=codeToExecute"
                },
                {
                    "description": "Show code executed",
                    "execution": "drupal snippet --show-code --file=\/path\/to\/file"
                }
            ],
            "aliases": [],
            "key": "snippet",
            "dashed": "snippet",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "cache:rebuild",
            "description": "Rebuild and clear all site caches.",
            "options": [],
            "arguments": {
                "cache": {
                    "name": "cache",
                    "description": "Only clear a specific cache."
                }
            },
            "examples": [
                {
                    "description": "Rebuild all caches",
                    "execution": "drupal cr all"
                },
                {
                    "description": "Rebuild discovery cache",
                    "execution": "drupal cr discovery"
                }
            ],
            "aliases": [
                "cr",
                "cc"
            ],
            "key": "cache.rebuild",
            "dashed": "cache-rebuild",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "cache:tag:invalidate",
            "description": "Invalidate cache tags.",
            "options": [],
            "arguments": {
                "tag": {
                    "name": "tag",
                    "description": "One or more tags to invalidate."
                }
            },
            "examples": [
                {
                    "description": "Invalidate routes",
                    "execution": "drupal cti routes"
                },
                {
                    "description": "Invalidate a specific node",
                    "execution": "drupal cti node:1 node_list"
                }
            ],
            "aliases": [
                "cti"
            ],
            "key": "cache.tag.invalidate",
            "dashed": "cache-tag-invalidate",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:delete",
            "description": "Delete configuration",
            "options": [],
            "arguments": {
                "type": {
                    "name": "type",
                    "description": "Configuration type."
                },
                "name": {
                    "name": "name",
                    "description": "Configuration name."
                }
            },
            "examples": [
                {
                    "description": "Provide a config type and a config name",
                    "execution": "drupal config:delete active all"
                }
            ],
            "aliases": [
                "cd"
            ],
            "key": "config.delete",
            "dashed": "config-delete",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:diff",
            "description": "Output configuration items that are different in active configuration compared with a directory.",
            "options": {
                "reverse": {
                    "name": "reverse",
                    "description": "See the changes in reverse (i.e diff a directory to the active configuration)."
                }
            },
            "arguments": {
                "directory": {
                    "name": "directory",
                    "description": "The directory to diff against. If omitted, choose from Drupal config directories."
                }
            },
            "examples": [
                {
                    "description": "Provide a config directory",
                    "execution": "drupal config:diff ..\/config\/path"
                }
            ],
            "aliases": [
                "cdi"
            ],
            "key": "config.diff",
            "dashed": "config-diff",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:edit",
            "description": "Change a configuration object with a text editor.",
            "options": [],
            "arguments": {
                "config-name": {
                    "name": "config-name",
                    "description": "Configuration object name, for example \"user.settings\"."
                },
                "editor": {
                    "name": "editor",
                    "description": "Editor, for example \"vim\" or \"gedit\"."
                }
            },
            "examples": [
                {
                    "description": "Edit system cron configurations with \"vim\" (default editor).",
                    "execution": "drupal config:edit system.cron"
                },
                {
                    "description": "Edit system cron configurations with \"gedit\".",
                    "execution": "drupal config:edit system.cron gedit"
                }
            ],
            "aliases": [
                "ced",
                "cdit"
            ],
            "key": "config.edit",
            "dashed": "config-edit",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:export",
            "description": "Export current application configuration.",
            "options": {
                "directory": {
                    "name": "directory",
                    "description": "Define the export directory to save the configuration output."
                },
                "remove-uuid": {
                    "name": "remove-uuid",
                    "description": "If set, the configuration will be exported without uuid key."
                },
                "remove-config-hash": {
                    "name": "remove-config-hash",
                    "description": "If set, the configuration will be exported without the default site hash key."
                },
                "tar": {
                    "name": "tar",
                    "description": "If set, the configuration will be exported to an archive file."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Optional you can add the path to export",
                    "execution": "drupal config:export  \\\n  --directory=\"path\/to\/export\"\n"
                },
                {
                    "description": "Export as a compressed file with uuid and config hashes removed",
                    "execution": "drupal config:export  \\\n  --directory=\"path\/to\/export\" \\\n  --tar \\\n  --remove-uuid \\\n  --remove-config-hash\n"
                }
            ],
            "aliases": [
                "ce"
            ],
            "key": "config.export",
            "dashed": "config-export",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:export:content:type",
            "description": "Export a specific content type and their fields.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "optional-config": {
                    "name": "optional-config",
                    "description": "Export content type as an optional YAML configuration in your module"
                },
                "remove-uuid": {
                    "name": "remove-uuid",
                    "description": "If set, the configuration will be exported without uuid key."
                },
                "remove-config-hash": {
                    "name": "remove-config-hash",
                    "description": "If set, the configuration will be exported without the default site hash key."
                },
                "include-module-dependencies": {
                    "name": "include-module-dependencies",
                    "description": "Include content type module dependencies in module info YAML file"
                }
            },
            "arguments": {
                "content-type": {
                    "name": "content-type",
                    "description": "Content Type to be exported"
                }
            },
            "examples": [
                {
                    "description": "Provide a content type and module name.",
                    "execution": "drupal config:export:content:type page \\\n  --module=\"demo\""
                },
                {
                    "description": "Export content type as an optional config for the provided module.",
                    "execution": "drupal config:export:content:type page \\\n  --module=\"demo\" \\\n  --optional-config \\\n  --remove-uuid \\\n  --remove-config-hash\n"
                }
            ],
            "aliases": [
                "cect"
            ],
            "key": "config.export.content.type",
            "dashed": "config-export-content-type",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:export:entity",
            "description": "Export a specific config entity and their fields.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "optional-config": {
                    "name": "optional-config",
                    "description": "Export bundle as an optional YAML configuration in your module"
                },
                "remove-uuid": {
                    "name": "remove-uuid",
                    "description": "If set, the configuration will be exported without uuid key."
                },
                "remove-config-hash": {
                    "name": "remove-config-hash",
                    "description": "If set, the configuration will be exported without the default site hash key."
                },
                "include-module-dependencies": {
                    "name": "include-module-dependencies",
                    "description": "Include bundle module dependencies in module info YAML file"
                }
            },
            "arguments": {
                "entity-type": {
                    "name": "entity-type",
                    "description": "An entity type (node_type, taxonomy_vocabulary, paragraphs_type) to be exported"
                },
                "bundle": {
                    "name": "bundle",
                    "description": "A bundle to be exported"
                }
            },
            "examples": [
                {
                    "description": "Provide an entity type, a bundle and a module name",
                    "execution": "drupal config:export:entity node_type page \\\n  --module=\"demo\""
                },
                {
                    "description": "If you want export a bundle as an optional config",
                    "execution": "drupal config:export:entity node_type page \\\n  --module=\"demo\" \\\n  --optional-config \\\n  --remove-uuid \\\n  --remove-config-hash\n"
                }
            ],
            "aliases": [
                "cee"
            ],
            "key": "config.export.entity",
            "dashed": "config-export-entity",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:export:single",
            "description": "Export a single configuration or a list of configurations as yml file(s).",
            "options": {
                "name": {
                    "name": "name",
                    "description": "Configuration name."
                },
                "directory": {
                    "name": "directory",
                    "description": "Define the export directory to save the configuration output."
                },
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "include-dependencies": {
                    "name": "include-dependencies",
                    "description": "Export dependencies of the configuration as well."
                },
                "optional": {
                    "name": "optional",
                    "description": "Export config as an optional YAML configuration in your module"
                },
                "remove-uuid": {
                    "name": "remove-uuid",
                    "description": "If set, the configuration will be exported without uuid key."
                },
                "remove-config-hash": {
                    "name": "remove-config-hash",
                    "description": "If set, the configuration will be exported without the default site hash key."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Provide config settings name to be exported.",
                    "execution": "drupal config:export:single \\\n  --name=config.settings.name"
                },
                {
                    "description": "Export with uuid and config hashes removed.",
                    "execution": "drupal config:export:single \\\n  --name=config.settings.name \\\n  --remove-uuid \\\n  --remove-config-hash\n"
                }
            ],
            "aliases": [
                "ces"
            ],
            "key": "config.export.single",
            "dashed": "config-export-single",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:export:view",
            "description": "Export a view in YAML format inside a provided module to reuse in another website.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "optional-config": {
                    "name": "optional-config",
                    "description": "Export view as an optional YAML configuration in your module"
                },
                "include-module-dependencies": {
                    "name": "include-module-dependencies",
                    "description": "Include view module dependencies in module info YAML file"
                },
                "remove-uuid": {
                    "name": "remove-uuid",
                    "description": "If set, the configuration will be exported without uuid key."
                },
                "remove-config-hash": {
                    "name": "remove-config-hash",
                    "description": "If set, the configuration will be exported without the default site hash key."
                }
            },
            "arguments": {
                "view-id": {
                    "name": "view-id",
                    "description": "View ID"
                }
            },
            "examples": [
                {
                    "description": "Perform a simple export.",
                    "execution": "drupal config:export:view viewid"
                },
                {
                    "description": "Export as optional config for the provided module.",
                    "execution": "drupal config:export:view viewid \\\n  --module=\"modulename\" \\\n  --optional-config \\\n  --include-module-dependencies \\\n  --remove-uuid \\\n  --remove-config-hash"
                },
                {
                    "description": "Export as config for the provided module, updating the module's info.yml with any module dependencies from the view.",
                    "execution": "drupal config:export:view viewid \\\n  --module=\"modulename\" \\\n  --optional-config \\\n  --include-module-dependencies"
                }
            ],
            "aliases": [
                "cev"
            ],
            "key": "config.export.view",
            "dashed": "config-export-view",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:import",
            "description": "Import configuration to current application.",
            "options": {
                "file": {
                    "name": "file",
                    "description": "Path to an archive file of configuration to import."
                },
                "directory": {
                    "name": "directory",
                    "description": "Path to a directory of configuration to import."
                },
                "remove-files": {
                    "name": "remove-files",
                    "description": "Remove files after synchronization."
                },
                "skip-uuid": {
                    "name": "skip-uuid",
                    "description": "Skip uuid from files"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Provide a configuration file",
                    "execution": "drupal config:import \\\n  --file=\/path\/to\/config\/file"
                },
                {
                    "description": "Provide a configuration directory",
                    "execution": "drupal config:import  \\\n  --directory=\/path\/to\/config\/dir\n"
                }
            ],
            "aliases": [
                "ci"
            ],
            "key": "config.import",
            "dashed": "config-import",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:import:single",
            "description": "Import a single configuration or a list of configurations.",
            "options": {
                "file": {
                    "name": "file",
                    "description": "The file(s) name or file(s) absolute path to import"
                },
                "directory": {
                    "name": "directory",
                    "description": "Path to a directory of configuration to import."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Providing a file option using full path.",
                    "execution": "drupal config:import:single \\\n  --file=\"\/path\/to\/file\/block.block.default_block.yml\"\n"
                },
                {
                    "description": "Providing file and directory options",
                    "execution": "drupal config:import:single  \\\n  --file=\"block.block.default_block.yml\" \\\n  --directory=\"\/path\/to\/directory\"\n"
                }
            ],
            "aliases": [
                "cis"
            ],
            "key": "config.import.single",
            "dashed": "config-import-single",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:override",
            "description": "Override config value in active configuration.",
            "options": {
                "key": {
                    "name": "key",
                    "description": "Key"
                },
                "value": {
                    "name": "value",
                    "description": "Value"
                }
            },
            "arguments": {
                "name": {
                    "name": "name",
                    "description": "Configuration name"
                }
            },
            "examples": [
                {
                    "description": "Override options from the Who's new view",
                    "execution": "drupal config:override views.view.who_s_new \\\n  --key='langcode' \\\n  --key='label' \\\n  --key='display.default.position' \\\n  --value='es' \\\n  --value='New label' \\\n  --value='1'\n"
                }
            ],
            "aliases": [
                "co"
            ],
            "key": "config.override",
            "dashed": "config-override",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "config:validate",
            "description": "Validate a drupal config against its schema",
            "options": [],
            "arguments": {
                "name": {
                    "name": "name",
                    "description": ""
                }
            },
            "examples": [
                {
                    "description": "Provide the configuration name.",
                    "execution": "drupal config:validate configuration.name"
                }
            ],
            "aliases": [
                "cv"
            ],
            "key": "config.validate",
            "dashed": "config-validate",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "create:comments",
            "description": "Create dummy comments for your Drupal 8 application.",
            "options": {
                "limit": {
                    "name": "limit",
                    "description": "How many comments would you like to create"
                },
                "title-words": {
                    "name": "title-words",
                    "description": "Maximum number of words in comment titles"
                },
                "time-range": {
                    "name": "time-range",
                    "description": "How far back in time should the comments be dated"
                }
            },
            "arguments": {
                "node-id": {
                    "name": "node-id",
                    "description": "Node ID where the comments will be created"
                }
            },
            "examples": [
                {
                    "description": "Provide the node id where the comments will be generated.",
                    "execution": "drupal create:comments  node-id"
                },
                {
                    "description": "Provide number of comments to generate, max title words and time range.",
                    "execution": "drupal create:comments  node-id \\\n  --limit=\"2\" \\\n  --title-words=\"5\" \\\n  --time-range=\"1\"\n"
                }
            ],
            "aliases": [
                "crc"
            ],
            "key": "create.comments",
            "dashed": "create-comments",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "create:nodes",
            "description": "Create dummy nodes for your Drupal 8 application.",
            "options": {
                "limit": {
                    "name": "limit",
                    "description": "How many nodes would you like to create"
                },
                "title-words": {
                    "name": "title-words",
                    "description": "Maximum number of words in node titles"
                },
                "time-range": {
                    "name": "time-range",
                    "description": "How far back in time should the nodes be dated"
                },
                "revision": {
                    "name": "revision",
                    "description": "Create revisions"
                },
                "language": {
                    "name": "language",
                    "description": "commands.create.nodes.options.language"
                }
            },
            "arguments": {
                "content-types": {
                    "name": "content-types",
                    "description": "Content type(s) to be used in node creation"
                }
            },
            "examples": [
                {
                    "description": "Provide the content type name.",
                    "execution": "drupal create:nodes content-name"
                },
                {
                    "description": "Provide the limit of publications, limit of title words, time range and language.",
                    "execution": "drupal create:nodes content-name \\\n  --limit=\"5\" \\\n  --title-words=\"5\" \\\n  --time-range=\"1\" \\\n  --revision \\\n  --language=\"und\"\n"
                }
            ],
            "aliases": [
                "crn"
            ],
            "key": "create.nodes",
            "dashed": "create-nodes",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "create:roles",
            "description": "Create dummy roles for your Drupal 8 application.",
            "options": {
                "limit": {
                    "name": "limit",
                    "description": "How many roles would you like to create"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Provide roles.",
                    "execution": "drupal create:roles"
                },
                {
                    "description": "Provide the number of roles to create",
                    "execution": "drupal create:roles\n"
                }
            ],
            "aliases": [
                "crr"
            ],
            "key": "create.roles",
            "dashed": "create-roles",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "create:terms",
            "description": "Create dummy terms for your Drupal 8 application.",
            "options": {
                "limit": {
                    "name": "limit",
                    "description": "How many terms would you like to create"
                },
                "name-words": {
                    "name": "name-words",
                    "description": "Maximum number of words in term names"
                }
            },
            "arguments": {
                "vocabularies": {
                    "name": "vocabularies",
                    "description": "Vocabulary(s) to be used in terms creation"
                }
            },
            "examples": [
                {
                    "description": "Provide the vocabulary term name.",
                    "execution": "drupal create:terms vocabulary"
                },
                {
                    "description": "Provide the limit of terms to add and limit of title words.",
                    "execution": "drupal create:terms tags \\\n  --limit=\"10\" \\\n  --name-words=\"5\"\n"
                }
            ],
            "aliases": [
                "crt"
            ],
            "key": "create.terms",
            "dashed": "create-terms",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "create:users",
            "description": "Create dummy users for your Drupal 8 application.",
            "options": {
                "limit": {
                    "name": "limit",
                    "description": "How many users would you like to create"
                },
                "password": {
                    "name": "password",
                    "description": "Password to be set to users created"
                },
                "time-range": {
                    "name": "time-range",
                    "description": "How far back in time should the users be dated"
                }
            },
            "arguments": {
                "roles": {
                    "name": "roles",
                    "description": "Role(s) to be used in user creation"
                }
            },
            "examples": [
                {
                    "description": "Provide the user role.",
                    "execution": "drupal create:users role"
                },
                {
                    "description": "Provide the number of users to create, password and time range to create.",
                    "execution": "drupal create:users role \\\n  --limit=\"5\" \\\n  --password=\"usersnewpassword\" \\\n  --time-range=\"1\"\n"
                }
            ],
            "aliases": [
                "cru"
            ],
            "key": "create.users",
            "dashed": "create-users",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "create:vocabularies",
            "description": "Create dummy vocabularies for your Drupal 8 application.",
            "options": {
                "limit": {
                    "name": "limit",
                    "description": "How many vocabularies would you like to create"
                },
                "name-words": {
                    "name": "name-words",
                    "description": "Maximum number of words in vocabulary names"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Provide the number of vocabularies to create and maximum number of words in vocabulary names",
                    "execution": "drupal create:vocabularies \\\n  --limit=\"5\" \\\n  --name-words=\"5\"\n"
                }
            ],
            "aliases": [
                "crv"
            ],
            "key": "create.vocabularies",
            "dashed": "create-vocabularies",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "cron:execute",
            "description": "Execute cron implementations by module or execute all crons",
            "options": [],
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                }
            },
            "examples": [
                {
                    "description": "Execute the cron globally",
                    "execution": "drupal cron:execute\n"
                },
                {
                    "description": "Execute the cron on the specified module",
                    "execution": "drupal cron:execute \\\n  <module>\n"
                }
            ],
            "aliases": [
                "croe",
                "cre"
            ],
            "key": "cron.execute",
            "dashed": "cron-execute",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "cron:release",
            "description": "Release cron system lock to run cron again",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Execute the cron globally",
                    "execution": "drupal cron:execute\n"
                }
            ],
            "aliases": [
                "cror"
            ],
            "key": "cron.release",
            "dashed": "cron-release",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:add",
            "description": "Add a database to settings.php",
            "options": {
                "database": {
                    "name": "database",
                    "description": "The database name"
                },
                "username": {
                    "name": "username",
                    "description": "The database username"
                },
                "password": {
                    "name": "password",
                    "description": "The database password"
                },
                "prefix": {
                    "name": "prefix",
                    "description": "The database prefix"
                },
                "host": {
                    "name": "host",
                    "description": "The database host address"
                },
                "port": {
                    "name": "port",
                    "description": "The database host port"
                },
                "driver": {
                    "name": "driver",
                    "description": "The database driver"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Add a database to the settings.php",
                    "execution": "drupal database:add \\\n  --database=DATABASE \\\n  --username=USERNAME \\\n  --password=PASSWORD\n"
                }
            ],
            "aliases": [
                "dba"
            ],
            "key": "database.add",
            "dashed": "database-add",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:client",
            "description": "Launch a DB client if it's available",
            "options": [],
            "arguments": {
                "database": {
                    "name": "database",
                    "description": "Database key from settings.php"
                },
                "target": {
                    "name": "target",
                    "description": "Database target from settings.php"
                }
            },
            "examples": [
                {
                    "description": "Launch the default client or could launch another regarding the specification on the argument",
                    "execution": "drupal database:client <database>\n"
                }
            ],
            "aliases": [
                "dbc"
            ],
            "key": "database.client",
            "dashed": "database-client",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:connect",
            "description": "Shows DB connection",
            "options": [],
            "arguments": {
                "key": {
                    "name": "key",
                    "description": "Database key from settings.php"
                },
                "target": {
                    "name": "target",
                    "description": "Database target from settings.php"
                }
            },
            "examples": [
                {
                    "description": "Connects to an specified database with key and target, or if no arguments default key and default target will be passed",
                    "execution": "drupal database:connect \\\n  <key> <target>\n"
                }
            ],
            "aliases": [
                "dbco",
                "sqlc"
            ],
            "key": "database.connect",
            "dashed": "database-connect",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:drop",
            "description": "Drop all tables in a given database.",
            "options": [],
            "arguments": {
                "database": {
                    "name": "database",
                    "description": "Database key from settings.php"
                },
                "target": {
                    "name": "target",
                    "description": "Database target from settings.php"
                }
            },
            "examples": [
                {
                    "description": "Drop the tables on the database specified on the argument",
                    "execution": "drupal database:drop \\\n  <database>\n"
                }
            ],
            "aliases": [
                "dbd"
            ],
            "key": "database.drop",
            "dashed": "database-drop",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:dump",
            "description": "Dump structure and contents of a database",
            "options": {
                "file": {
                    "name": "file",
                    "description": "The filename for your database backup"
                },
                "gz": {
                    "name": "gz",
                    "description": "Pass this option if you want the sql result file gzipped"
                },
                "exclude-cache": {
                    "name": "exclude-cache",
                    "description": "commands.database.dump.options.exclude.cache"
                }
            },
            "arguments": {
                "database": {
                    "name": "database",
                    "description": "Database key from settings.php"
                },
                "target": {
                    "name": "target",
                    "description": "Database target from settings.php"
                }
            },
            "examples": [
                {
                    "description": "Dump default database or the one specified on the argument",
                    "execution": "drupal database:dump \\\n  <database>\n"
                },
                {
                    "description": "Dump in gz compressed format",
                    "execution": "drupal database:dump \\\n  --gz"
                }
            ],
            "aliases": [
                "dbdu"
            ],
            "key": "database.dump",
            "dashed": "database-dump",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:log:clear",
            "description": "Remove events from DBLog table, filters are available",
            "options": {
                "type": {
                    "name": "type",
                    "description": "Filter events by a specific type"
                },
                "severity": {
                    "name": "severity",
                    "description": "Filter events by a specific level of severity"
                },
                "user-id": {
                    "name": "user-id",
                    "description": "Filter events by a specific user id"
                }
            },
            "arguments": {
                "event-id": {
                    "name": "event-id",
                    "description": "DBLog event ID"
                }
            },
            "examples": [
                {
                    "description": "Clear the database log from DBLog table",
                    "execution": "drupal database:log:clear \\\n  <database>\n"
                },
                {
                    "description": "Clear the database log from DBLog table using filters",
                    "execution": "drupal database:log:clear \\\n  <database> \\\n  --type=TYPE \\\n  --severity=SEVERITY"
                }
            ],
            "aliases": [
                "dblc"
            ],
            "key": "database.log.clear",
            "dashed": "database-log-clear",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:log:poll",
            "description": "Poll the watchdog and print new log entries every x seconds",
            "options": {
                "type": {
                    "name": "type",
                    "description": "Filter events by a specific type"
                },
                "severity": {
                    "name": "severity",
                    "description": "Filter events by a specific level of severity"
                },
                "user-id": {
                    "name": "user-id",
                    "description": "Filter events by a specific user id"
                }
            },
            "arguments": {
                "duration": {
                    "name": "duration",
                    "description": "Duration in seconds which to sleep between database reads"
                }
            },
            "examples": [
                {
                    "description": "Print the log entries on screen every x seconds",
                    "execution": "drupal database:log:poll \\\n  100\n"
                }
            ],
            "aliases": [
                "dblp"
            ],
            "key": "database.log.poll",
            "dashed": "database-log-poll",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:query",
            "description": "Executes a SQL statement directly as argument",
            "options": {
                "quick": {
                    "name": "quick",
                    "description": "Do not cache each query result, print each row as it is received"
                },
                "debug": {
                    "name": "debug",
                    "description": "Prints debugging information and memory and CPU usage statistics when the program exits"
                },
                "html": {
                    "name": "html",
                    "description": "Produce HTML output"
                },
                "xml": {
                    "name": "xml",
                    "description": "Produce XML output"
                },
                "raw": {
                    "name": "raw",
                    "description": "Special characters are not escaped in the output."
                },
                "vertical": {
                    "name": "vertical",
                    "description": "Print query output rows vertically"
                },
                "batch": {
                    "name": "batch",
                    "description": "Print results using tab as the column separator, with each row on a new line. With this option, mysql does not use the history file"
                }
            },
            "arguments": {
                "query": {
                    "name": "query",
                    "description": "The SQL statement to execute"
                },
                "database": {
                    "name": "database",
                    "description": "Database key from settings.php"
                },
                "target": {
                    "name": "target",
                    "description": "Database target from settings.php"
                }
            },
            "examples": [
                {
                    "description": "Send a database query",
                    "execution": "drupal database:query 'select * from node limit 0,1'\n"
                }
            ],
            "aliases": [
                "dbq",
                "sqlq"
            ],
            "key": "database.query",
            "dashed": "database-query",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "database:restore",
            "description": "Restore structure and contents of a database.",
            "options": {
                "file": {
                    "name": "file",
                    "description": "The filename for your database backup file (absolute path) . If using a .sql.gz file, the gunzip command needs to be installed."
                }
            },
            "arguments": {
                "database": {
                    "name": "database",
                    "description": "Database key from settings.php"
                },
                "target": {
                    "name": "target",
                    "description": "Database target from settings.php"
                }
            },
            "examples": [
                {
                    "description": "Restore the database file dump to the database default or another one specified",
                    "execution": "drupal database:restore \\\n  --file='\/srv\/dump\/db.sql'\n"
                }
            ],
            "aliases": [
                "dbr"
            ],
            "key": "database.restore",
            "dashed": "database-restore",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:breakpoints",
            "description": "Displays breakpoints available in application",
            "options": [],
            "arguments": {
                "group": {
                    "name": "group",
                    "description": "Enter Breakpoint Group Name"
                }
            },
            "examples": [
                {
                    "description": "Provide a group name.",
                    "execution": "drupal debug:breakpoints bartik"
                }
            ],
            "aliases": [
                "dbre"
            ],
            "key": "debug.breakpoints",
            "dashed": "debug-breakpoints",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:cache:context",
            "description": "Displays current cache context for the application.",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Displays cache context",
                    "execution": "drupal debug:cache:context\n"
                }
            ],
            "aliases": [
                "dcc"
            ],
            "key": "debug.cache.context",
            "dashed": "debug-cache-context",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:chain",
            "description": "List available chain files.",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [
                "dch"
            ],
            "key": "debug.chain",
            "dashed": "debug-chain",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:config",
            "description": "List configuration objects names and single configuration object.",
            "options": {
                "show-overridden": {
                    "name": "show-overridden",
                    "description": "Show overridden configurations."
                }
            },
            "arguments": {
                "name": {
                    "name": "name",
                    "description": "Configuration object name, for example \"system.site\"."
                }
            },
            "examples": [
                {
                    "description": "List all configuration object names.",
                    "execution": "drupal debug:config"
                },
                {
                    "description": "Display system site configurations values.",
                    "execution": "drupal debug:config system.site"
                },
                {
                    "description": "List all system configuration names.",
                    "execution": "drupal debug:config | grep system"
                },
                {
                    "description": "List all configuration including overridden values.",
                    "execution": "drupal debug:config --show-overridden"
                }
            ],
            "aliases": [
                "dc"
            ],
            "key": "debug.config",
            "dashed": "debug-config",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:config:settings",
            "description": "Displays current key:value on settings file.",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Displays key:value as per the settings file",
                    "execution": "drupal debug:config:settings\n"
                }
            ],
            "aliases": [
                "dcs"
            ],
            "key": "debug.config.settings",
            "dashed": "debug-config-settings",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:config:validate",
            "description": "Validate a schema implementation before a module is installed.",
            "options": {
                "schema-name": {
                    "name": "schema-name",
                    "description": ""
                }
            },
            "arguments": {
                "filepath": {
                    "name": "filepath",
                    "description": ""
                },
                "schema-filepath": {
                    "name": "schema-filepath",
                    "description": ""
                }
            },
            "examples": [
                {
                    "description": "Validates a schema",
                    "execution": "drupal debug:config:validate \\\n  \/path\/to\/file \\\n  \/path\/to\/schema-filepath\n"
                }
            ],
            "aliases": [
                "dcv"
            ],
            "key": "debug.config.validate",
            "dashed": "debug-config-validate",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:container",
            "description": "Displays current services for an application.",
            "options": {
                "parameters": {
                    "name": "parameters",
                    "description": "Service name."
                },
                "tag": {
                    "name": "tag",
                    "description": "Service tag "
                }
            },
            "arguments": {
                "service": {
                    "name": "service",
                    "description": "Service name."
                },
                "method": {
                    "name": "method",
                    "description": "Method name."
                },
                "arguments": {
                    "name": "arguments",
                    "description": "Array of Arguments in CSV or JSON format."
                }
            },
            "examples": [
                {
                    "description": "Displays the views.views_data_helper services",
                    "execution": "drupal debug:container views.views_data_helper\n"
                }
            ],
            "aliases": [
                "dco",
                "cod"
            ],
            "key": "debug.container",
            "dashed": "debug-container",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:cron",
            "description": "List of modules implementing a cron",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "This will show a list with modules implementing the cron hook",
                    "execution": "drupal debug:cron\n"
                }
            ],
            "aliases": [
                "dcr"
            ],
            "key": "debug.cron",
            "dashed": "debug-cron",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:database:log",
            "description": "Displays current log events for the application",
            "options": {
                "type": {
                    "name": "type",
                    "description": "Filter events by a specific type"
                },
                "severity": {
                    "name": "severity",
                    "description": "Filter events by a specific level of severity"
                },
                "user-id": {
                    "name": "user-id",
                    "description": "Filter events by a specific user id"
                },
                "asc": {
                    "name": "asc",
                    "description": "List events in ascending order"
                },
                "limit": {
                    "name": "limit",
                    "description": "Limit results to a specific number"
                },
                "offset": {
                    "name": "offset",
                    "description": "Starting point of a limit"
                },
                "yml": {
                    "name": "yml",
                    "description": "Print in a yml style"
                }
            },
            "arguments": {
                "event-id": {
                    "name": "event-id",
                    "description": "DBLog event ID"
                }
            },
            "examples": [
                {
                    "description": "List all the entries on the log",
                    "execution": "drupal debug:database:log\n"
                },
                {
                    "description": "List specific log entry by Event ID",
                    "execution": "drupal debug:database:log 21228\n"
                }
            ],
            "aliases": [
                "dbb",
                "ws"
            ],
            "key": "debug.database.log",
            "dashed": "debug-database-log",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:database:table",
            "description": "Show all tables in a given database.",
            "options": {
                "database": {
                    "name": "database",
                    "description": "Database key from settings.php"
                }
            },
            "arguments": {
                "table": {
                    "name": "table",
                    "description": "Table to debug"
                }
            },
            "examples": [
                {
                    "description": "Show all tables in a database",
                    "execution": "drupal debug:database:table\n"
                },
                {
                    "description": "Show fields in the node table or another specified in the argument",
                    "execution": "drupal debug:database:table node\n"
                }
            ],
            "aliases": [
                "ddt"
            ],
            "key": "debug.database.table",
            "dashed": "debug-database-table",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:dotenv",
            "description": "Debug Dotenv debug values.",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "debug.dotenv",
            "dashed": "debug-dotenv",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:entity",
            "description": "Debug entities available in the system",
            "options": [],
            "arguments": {
                "entity-type": {
                    "name": "entity-type",
                    "description": "commands.debug.entity.arguments.entity-type"
                }
            },
            "examples": [
                {
                    "description": "Displays the available entities",
                    "execution": "drupal debug:entity\n"
                }
            ],
            "aliases": [
                "de"
            ],
            "key": "debug.entity",
            "dashed": "debug-entity",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:event",
            "description": "Displays current events ",
            "options": [],
            "arguments": {
                "event": {
                    "name": "event",
                    "description": "Event to debug"
                }
            },
            "examples": [
                {
                    "description": "List all the events that could be debugged",
                    "execution": "drupal debug:event\n"
                },
                {
                    "description": "Show the information for the kernel.request event",
                    "execution": "drupal debug:event kernel.request\n"
                }
            ],
            "aliases": [
                "dev"
            ],
            "key": "debug.event",
            "dashed": "debug-event",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:hook",
            "description": "commands.debug.hook.description",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [
                "dbh"
            ],
            "key": "debug.hook",
            "dashed": "debug-hook",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:image:styles",
            "description": "List image styles on the site",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "List all images styles on the site",
                    "execution": "drupal debug:image:styles\n"
                }
            ],
            "aliases": [
                "dis"
            ],
            "key": "debug.image.styles",
            "dashed": "debug-image-styles",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:libraries",
            "description": "Displays libraries available in application",
            "options": [],
            "arguments": {
                "group": {
                    "name": "group",
                    "description": "Extension or Library Name"
                }
            },
            "examples": [
                {
                    "description": "List all extensions with libraries",
                    "execution": "drupal debug:libraries\n"
                },
                {
                    "description": "List block extension libraries",
                    "execution": "drupal debug:libraries block\n"
                },
                {
                    "description": "List block\/drupal.block library",
                    "execution": "drupal debug:libraries block\/drupal.block\n"
                }
            ],
            "aliases": [
                "dl"
            ],
            "key": "debug.libraries",
            "dashed": "debug-libraries",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:module",
            "description": "Displays current modules available for application",
            "options": {
                "status": {
                    "name": "status",
                    "description": "Module status [installed|uninstalled]"
                },
                "type": {
                    "name": "type",
                    "description": "Module type [core|no-core]"
                }
            },
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "Module name"
                }
            },
            "examples": [
                {
                    "description": "Display all installed modules",
                    "execution": "drupal mod --status=installed"
                },
                {
                    "description": "Display all installed and no core modules",
                    "execution": "drupal mod --status=installed --type=no-core"
                }
            ],
            "aliases": [
                "dm"
            ],
            "key": "debug.module",
            "dashed": "debug-module",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:multisite",
            "description": "List all multi-sites available in system",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Displays multi-site information",
                    "execution": "drupal debug:multisite\n"
                }
            ],
            "aliases": [
                "dmu",
                "msd"
            ],
            "key": "debug.multisite",
            "dashed": "debug-multisite",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:permission",
            "description": "Displays all user permissions.",
            "options": [],
            "arguments": {
                "role": {
                    "name": "role",
                    "description": "User role"
                }
            },
            "examples": [
                {
                    "description": "Displays all the permissions availables on the site",
                    "execution": "drupal debug:permission\n"
                }
            ],
            "aliases": [
                "dp"
            ],
            "key": "debug.permission",
            "dashed": "debug-permission",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:plugin",
            "description": "Displays all plugin types.",
            "options": [],
            "arguments": {
                "type": {
                    "name": "type",
                    "description": "Plugin type"
                },
                "id": {
                    "name": "id",
                    "description": "Plugin ID"
                }
            },
            "examples": [
                {
                    "description": "Displays a list with all the plugins on the current site",
                    "execution": "drupal debug:plugin"
                },
                {
                    "description": "Displays block plugin information",
                    "execution": "drupal debug:plugin block"
                },
                {
                    "description": "Displays block broken information",
                    "execution": "drupal debug:plugin block broken\n"
                }
            ],
            "aliases": [
                "dpl"
            ],
            "key": "debug.plugin",
            "dashed": "debug-plugin",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:queue",
            "description": "Displays the queues of your application",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Displays the queues of the application",
                    "execution": "drupal debug:queue\n"
                }
            ],
            "aliases": [
                "dq"
            ],
            "key": "debug.queue",
            "dashed": "debug-queue",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:roles",
            "description": "Displays current roles for the application",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Roles list on the site",
                    "execution": "drupal debug:roles\n"
                }
            ],
            "aliases": [
                "dusr"
            ],
            "key": "debug.roles",
            "dashed": "debug-roles",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:router",
            "description": "Displays current routes for the application or information for a particular route",
            "options": {
                "pattern": {
                    "name": "pattern",
                    "description": "Route pattern"
                }
            },
            "arguments": {
                "route-name": {
                    "name": "route-name",
                    "description": "Route names"
                }
            },
            "examples": [
                {
                    "description": "Displays current routes for the application",
                    "execution": "drupal rod"
                },
                {
                    "description": "Displays details for the route user.page (\/user)",
                    "execution": "drupal rod user.page"
                },
                {
                    "description": "Shows the routes list on the site",
                    "execution": "drupal debug:router"
                },
                {
                    "description": "Display information on the user.login",
                    "execution": "drupal debug:router user.login"
                },
                {
                    "description": "Display information for the routes by pattern (\/user\/login)",
                    "execution": "drupal debug:router --pattern=\/user\/login"
                }
            ],
            "aliases": [
                "dr",
                "rod"
            ],
            "key": "debug.router",
            "dashed": "debug-router",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:settings",
            "description": "List user Drupal Console settings.",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "List user Drupal Console settings.",
                    "execution": "drupal debug:settings\n"
                }
            ],
            "aliases": [
                "dse"
            ],
            "key": "debug.settings",
            "dashed": "debug-settings",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:site",
            "description": "List all known local and remote sites.",
            "options": [],
            "arguments": {
                "target": {
                    "name": "target",
                    "description": "Target"
                },
                "property": {
                    "name": "property",
                    "description": "Property"
                }
            },
            "examples": [
                {
                    "description": "List all known local and remote sites.",
                    "execution": "drupal debug:site\n"
                }
            ],
            "aliases": [
                "dsi"
            ],
            "key": "debug.site",
            "dashed": "debug-site",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:state",
            "description": "Show the current State keys.",
            "options": [],
            "arguments": {
                "key": {
                    "name": "key",
                    "description": "The State key to debug."
                }
            },
            "examples": [
                {
                    "description": "List of the states on the site",
                    "execution": "drupal debug:state\n"
                },
                {
                    "description": "Displays a detail of the state install_task tok from the list of states",
                    "execution": "drupal debug:state install_task\n"
                }
            ],
            "aliases": [
                "dst"
            ],
            "key": "debug.state",
            "dashed": "debug-state",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:theme",
            "description": "Displays current themes for the application",
            "options": [],
            "arguments": {
                "theme": {
                    "name": "theme",
                    "description": "Specific theme to debug"
                }
            },
            "examples": [
                {
                    "description": "List of themes on the site",
                    "execution": "drupal debug:theme"
                },
                {
                    "description": "Bartik theme information",
                    "execution": "drupal debug:theme bartik"
                }
            ],
            "aliases": [
                "dt",
                "tde"
            ],
            "key": "debug.theme",
            "dashed": "debug-theme",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:theme:keys",
            "description": "Displays all theme keys provided by hook_theme functions",
            "options": [],
            "arguments": {
                "key": {
                    "name": "key",
                    "description": "Key"
                }
            },
            "examples": [],
            "aliases": [
                "dtk"
            ],
            "key": "debug.theme.keys",
            "dashed": "debug-theme-keys",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:update",
            "description": "Displays current updates available for the application",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "List of pending updates",
                    "execution": "drupal debug:update\n"
                }
            ],
            "aliases": [
                "du",
                "upd"
            ],
            "key": "debug.update",
            "dashed": "debug-update",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:update:composer",
            "description": "Displays current updates available from the composer file",
            "options": {
                "only-drupal": {
                    "name": "only-drupal",
                    "description": "Show only drupal (modules\/themes) updates"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "List of pending updates from composer",
                    "execution": "drupal debug:update:composer\n"
                }
            ],
            "aliases": [
                "duc"
            ],
            "key": "debug.update.composer",
            "dashed": "debug-update-composer",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:user",
            "description": "Displays current users for the application",
            "options": {
                "uid": {
                    "name": "uid",
                    "description": "Filters the result list by uids [between quotes separated by spaces]"
                },
                "username": {
                    "name": "username",
                    "description": "Filters the result list by user-names [between quotes separated by spaces]"
                },
                "mail": {
                    "name": "mail",
                    "description": "Filters the result list by user's e-mail [between quotes separated by spaces]"
                },
                "roles": {
                    "name": "roles",
                    "description": "Roles to filter debug"
                },
                "limit": {
                    "name": "limit",
                    "description": "How many users would you like to be listed in debug"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Users list on the site",
                    "execution": "drupal debug:user\n"
                }
            ],
            "aliases": [
                "dus"
            ],
            "key": "debug.user",
            "dashed": "debug-user",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:views",
            "description": "Displays current views resources for the application",
            "options": {
                "tag": {
                    "name": "tag",
                    "description": "View tag"
                },
                "status": {
                    "name": "status",
                    "description": "View status (Enabled|Disabled)"
                }
            },
            "arguments": {
                "view-id": {
                    "name": "view-id",
                    "description": "View ID"
                }
            },
            "examples": [
                {
                    "description": "List of views on the site",
                    "execution": "drupal debug:views\n"
                }
            ],
            "aliases": [
                "vde"
            ],
            "key": "debug.views",
            "dashed": "debug-views",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "debug:views:plugins",
            "description": "Displays current views plugins for the application",
            "options": [],
            "arguments": {
                "type": {
                    "name": "type",
                    "description": "Filter views plugins by type"
                }
            },
            "examples": [
                {
                    "description": "List of views plugins",
                    "execution": "drupal debug:views:plugins\n"
                }
            ],
            "aliases": [
                "dvp"
            ],
            "key": "debug.views.plugins",
            "dashed": "debug-views-plugins",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "demo:harold",
            "description": "Download Drupal + Drupal Console to contribute.",
            "options": {
                "file": {
                    "name": "file",
                    "description": ""
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "demo.harold",
            "dashed": "demo-harold",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "devel:dumper",
            "description": "commands.devel.dumper.messages.change-devel-dumper-plugin",
            "options": [],
            "arguments": {
                "dumper": {
                    "name": "dumper",
                    "description": "Name of the devel dumper plugin"
                }
            },
            "examples": [],
            "aliases": [
                "dd"
            ],
            "key": "devel.dumper",
            "dashed": "devel-dumper",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:contribute",
            "description": "Download Drupal + Drupal Console to contribute.",
            "options": {
                "file": {
                    "name": "file",
                    "description": ""
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "develop.contribute",
            "dashed": "develop-contribute",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:create:symlinks",
            "description": "Create symlinks between Drupal site and cloned repositories.",
            "options": {
                "code-directory": {
                    "name": "code-directory",
                    "description": "The directory where the projects were cloned"
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "develop.create.symlinks",
            "dashed": "develop-create-symlinks",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:doc:cheatsheet",
            "description": "Generate a printable cheatsheet for Commands",
            "options": {
                "path": {
                    "name": "path",
                    "description": "The path to generate the pdf for the documentation"
                },
                "wkhtmltopdf": {
                    "name": "wkhtmltopdf",
                    "description": "The path for the wkhtmltopdf binary in your system"
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [
                "gdc"
            ],
            "key": "develop.doc.cheatsheet",
            "dashed": "develop-doc-cheatsheet",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:doc:dash",
            "description": "Generate the DrupalConsole.docset package for Dash",
            "options": {
                "path": {
                    "name": "path",
                    "description": "The path to the directory where the docset will be saved."
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [
                "gdd"
            ],
            "key": "develop.doc.dash",
            "dashed": "develop-doc-dash",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:doc:data",
            "description": "Generate documentations for Commands.",
            "options": {
                "file": {
                    "name": "file",
                    "description": "The file to render the command data"
                },
                "help": {
                    "name": "help",
                    "description": "Display this help message"
                },
                "quiet": {
                    "name": "quiet",
                    "description": "Do not output any message"
                },
                "verbose": {
                    "name": "verbose",
                    "description": "Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug"
                },
                "version": {
                    "name": "version",
                    "description": "Display this application version"
                },
                "ansi": {
                    "name": "ansi",
                    "description": "Force ANSI output"
                },
                "no-ansi": {
                    "name": "no-ansi",
                    "description": "Disable ANSI output"
                },
                "no-interaction": {
                    "name": "no-interaction",
                    "description": "Do not ask any interactive question"
                },
                "env": {
                    "name": "env",
                    "description": "The Environment name"
                },
                "root": {
                    "name": "root",
                    "description": "Define the Drupal root to be used in command execution"
                },
                "debug": {
                    "name": "debug",
                    "description": "Switches on debug mode"
                },
                "learning": {
                    "name": "learning",
                    "description": "Generate a verbose code output"
                },
                "generate-chain": {
                    "name": "generate-chain",
                    "description": "Shows command options and arguments as yaml output to be used in chain command"
                },
                "generate-inline": {
                    "name": "generate-inline",
                    "description": "Shows command options and arguments as inline command"
                },
                "generate-doc": {
                    "name": "generate-doc",
                    "description": "Shows command options and arguments as markdown"
                },
                "target": {
                    "name": "target",
                    "description": "Site name you want to interact with (for local or remote sites)"
                },
                "uri": {
                    "name": "uri",
                    "description": "URI of the Drupal site to use (for multi-site environments or when running on an alternate port)"
                },
                "yes": {
                    "name": "yes",
                    "description": "Skip confirmation and proceed"
                }
            },
            "arguments": {
                "command": {
                    "name": "command",
                    "description": "The command to execute"
                }
            },
            "examples": [],
            "aliases": [
                "gdda"
            ],
            "key": "develop.doc.data",
            "dashed": "develop-doc-data",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:doc:gitbook",
            "description": "Generate documentations for Commands",
            "options": {
                "path": {
                    "name": "path",
                    "description": "The path to render the documentation"
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [
                "gdg"
            ],
            "key": "develop.doc.gitbook",
            "dashed": "develop-doc-gitbook",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:example",
            "description": null,
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "develop.example",
            "dashed": "develop-example",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:example:container:aware",
            "description": null,
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "develop.example.container.aware",
            "dashed": "develop-example-container-aware",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:translation:cleanup",
            "description": "Clean up translation files",
            "options": [],
            "arguments": {
                "language": {
                    "name": "language",
                    "description": "Language to clean up files against English"
                },
                "library": {
                    "name": "library",
                    "description": "Library to clean up files against English i.e console-yaml"
                }
            },
            "examples": [
                {
                    "description": "Delete all unnecessary files in all languages.",
                    "execution": "drupal translation:cleanup"
                },
                {
                    "description": "Delete all unnecessary files in Spanish language",
                    "execution": "drupal translation:cleanup es"
                },
                {
                    "description": "Delete all unnecessary files in all languages in console-develop library",
                    "execution": "drupal translation:cleanup all console-develop"
                },
                {
                    "description": "Delete all unnecessary files in Spanish language in console-develop library",
                    "execution": "drupal translation:cleanup es console-develop"
                }
            ],
            "aliases": [
                "tc"
            ],
            "key": "develop.translation.cleanup",
            "dashed": "develop-translation-cleanup",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:translation:pending",
            "description": "Determine pending translation strings in a language or a specific file in a language",
            "options": {
                "file": {
                    "name": "file",
                    "description": "Specific file to determine pending translations against English"
                }
            },
            "arguments": {
                "language": {
                    "name": "language",
                    "description": "Language to determine pending translations against English"
                },
                "library": {
                    "name": "library",
                    "description": "Library to determine pending translations against English i.e console-yaml"
                }
            },
            "examples": [
                {
                    "description": "Determine pending translation strings in all languages.",
                    "execution": "drupal translation:pending"
                },
                {
                    "description": "Determine pending translation strings in Spanish language",
                    "execution": "drupal translation:pending es"
                },
                {
                    "description": "Determine pending translation strings in all languages in console-develop library",
                    "execution": "drupal translation:pending all console-develop"
                },
                {
                    "description": "Determine pending translation strings in Spanish language in console-develop library",
                    "execution": "drupal translation:pending es console-develop"
                }
            ],
            "aliases": [
                "tp"
            ],
            "key": "develop.translation.pending",
            "dashed": "develop-translation-pending",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:translation:stats",
            "description": "Calcuate translation stats",
            "options": {
                "format": {
                    "name": "format",
                    "description": "Define output format table|markdown"
                }
            },
            "arguments": {
                "language": {
                    "name": "language",
                    "description": "Language to calculate translation stats against English"
                },
                "library": {
                    "name": "library",
                    "description": "Library to calculate translation stats against English i.e console-yaml"
                }
            },
            "examples": [
                {
                    "description": "Calculate translation stats in all languages.",
                    "execution": "drupal translation:stats"
                },
                {
                    "description": "Calculate translation stats in Spanish language",
                    "execution": "drupal translation:stats es"
                },
                {
                    "description": "Calculate translation stats in all languages in console-develop library",
                    "execution": "drupal translation:stats all console-develop"
                },
                {
                    "description": "Calculate translation stats in Spanish language in console-develop library",
                    "execution": "drupal translation:stats es console-develop"
                }
            ],
            "aliases": [
                "ts"
            ],
            "key": "develop.translation.stats",
            "dashed": "develop-translation-stats",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "develop:translation:sync",
            "description": "Sync translation files",
            "options": {
                "file": {
                    "name": "file",
                    "description": "commands.develop.translation.stats.options.file"
                }
            },
            "arguments": {
                "language": {
                    "name": "language",
                    "description": "Language to syncronize against English source files"
                },
                "library": {
                    "name": "library",
                    "description": "Library to syncronize against English i.e console-yaml"
                }
            },
            "examples": [
                {
                    "description": "Syncronize translation files in all languages.",
                    "execution": "drupal translation:sync"
                },
                {
                    "description": "Syncronize translation files in Spanish language",
                    "execution": "drupal translation:sync es"
                },
                {
                    "description": "Syncronize translation files in all languages in console-develop library",
                    "execution": "drupal translation:sync all console-develop"
                },
                {
                    "description": "Syncronize translation files in Spanish language in console-develop library",
                    "execution": "drupal translation:sync es console-develop"
                }
            ],
            "aliases": [
                "tsy"
            ],
            "key": "develop.translation.sync",
            "dashed": "develop-translation-sync",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "docker:init",
            "description": "Create a docker-compose.yml file",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "docker.init",
            "dashed": "docker-init",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "dotenv:init",
            "description": "Add support and required config to work with an .env file",
            "options": {
                "load-from-env": {
                    "name": "load-from-env",
                    "description": "commands.dotenv.init.options.load-from-env"
                },
                "load-settings": {
                    "name": "load-settings",
                    "description": "commands.dotenv.init.options.load-settings"
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "dotenv.init",
            "dashed": "dotenv-init",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "entity:delete",
            "description": "Delete a specific entity",
            "options": {
                "all": {
                    "name": "all",
                    "description": "Delete all entities of the given type."
                }
            },
            "arguments": {
                "entity-definition-id": {
                    "name": "entity-definition-id",
                    "description": "Entity definition id"
                },
                "entity-id": {
                    "name": "entity-id",
                    "description": "Entity ID to be deleted"
                }
            },
            "examples": [
                {
                    "description": "Delete entity type content using node id",
                    "execution": "drupal entity:delete node 1\n"
                }
            ],
            "aliases": [
                "ed"
            ],
            "key": "entity.delete",
            "dashed": "entity-delete",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "field:info",
            "description": "View information about fields.",
            "options": {
                "detailed": {
                    "name": "detailed",
                    "description": "Extended output with machine names and descriptions"
                },
                "entity": {
                    "name": "entity",
                    "description": "Restrict to a specific fieldabe entity type, for example: node, comment, taxonomy_term, shortcut, block_content, contact_message"
                },
                "bundle": {
                    "name": "bundle",
                    "description": "Restrict to a specific bundle type, for example: article"
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [
                "fii"
            ],
            "key": "field.info",
            "dashed": "field-info",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:ajax:command",
            "description": "Generate & Register a custom ajax command",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Ajax Class name"
                },
                "method": {
                    "name": "method",
                    "description": "Custom ajax method"
                },
                "js-name": {
                    "name": "js-name",
                    "description": "Custom javascript name"
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [
                "gac"
            ],
            "key": "generate.ajax.command",
            "dashed": "generate-ajax-command",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:authentication:provider",
            "description": "Generate an Authentication Provider",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Authentication Provider class"
                },
                "provider-id": {
                    "name": "provider-id",
                    "description": "Provider ID"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an authentication provider specifying the module, the class and the provider id",
                    "execution": "drupal generate:authentication:provider  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultAuthenticationProvider\"  \\\n  --provider-id=\"default_authentication_provider\"\n"
                }
            ],
            "aliases": [
                "gap"
            ],
            "key": "generate.authentication.provider",
            "dashed": "generate-authentication-provider",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:breakpoint",
            "description": "Generate breakpoint",
            "options": {
                "theme": {
                    "name": "theme",
                    "description": "Theme name"
                },
                "breakpoints": {
                    "name": "breakpoints",
                    "description": "Breakpoints"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a breakpoint specifying the theme, a breakpoint name, its label, the media query, its weight and multipliers",
                    "execution": "drupal generate:breakpoint  \\\n  --theme=\"classy\"  \\\n  --breakpoints='\"breakpoint_name\":\"narrow\", \"breakpoint_label\":\"narrow\", \"breakpoint_media_query\":\"all and (min-width: 560px) and (max-width: 850px)\", \"breakpoint_weight\":\"1\", \"breakpoint_multipliers\":\"1x\"'"
                }
            ],
            "aliases": [
                "gb"
            ],
            "key": "generate.breakpoint",
            "dashed": "generate-breakpoint",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:cache:context",
            "description": "Generate a cache context",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "cache-context": {
                    "name": "cache-context",
                    "description": "The cache context name"
                },
                "class": {
                    "name": "class",
                    "description": "Cache context class name"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate cache for a context specifying the module, the context name and its class",
                    "execution": "drupal generate:cache:context  \\\n  --module=\"modulename\"  \\\n  --cache-context=\"ContextName\"  \\\n  --class=\"DefaultCacheContext\""
                }
            ],
            "aliases": [
                "gcc"
            ],
            "key": "generate.cache.context",
            "dashed": "generate-cache-context",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:command",
            "description": "Generate commands for the console.",
            "options": {
                "extension": {
                    "name": "extension",
                    "description": "The extension name."
                },
                "extension-type": {
                    "name": "extension-type",
                    "description": "The extension type."
                },
                "class": {
                    "name": "class",
                    "description": "The Class that describes the command. (Must end with the word 'Command')."
                },
                "name": {
                    "name": "name",
                    "description": "The Command name."
                },
                "initialize": {
                    "name": "initialize",
                    "description": "Add initialize method."
                },
                "interact": {
                    "name": "interact",
                    "description": "Add interact method."
                },
                "container-aware": {
                    "name": "container-aware",
                    "description": "Is the command aware of the drupal site installation when executed?"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                },
                "generator": {
                    "name": "generator",
                    "description": "Add a Generator class for this command."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a command specifying the extension name and type, its class and the name.",
                    "execution": "drupal generate:command  \\\n  --extension=\"ExtensionName\"  \\\n  --extension-type=\"module\"  \\\n  --class=\"DefaultCommand\"  \\\n  --name=\"CommandName\""
                }
            ],
            "aliases": [
                "gco"
            ],
            "key": "generate.command",
            "dashed": "generate-command",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:composer",
            "description": "Generate a composer.json file",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "name": {
                    "name": "name",
                    "description": "Package name"
                },
                "type": {
                    "name": "type",
                    "description": "Package type"
                },
                "description": {
                    "name": "description",
                    "description": "Package description"
                },
                "keywords": {
                    "name": "keywords",
                    "description": "Package keywords"
                },
                "license": {
                    "name": "license",
                    "description": "License"
                },
                "homepage": {
                    "name": "homepage",
                    "description": "Project homepage"
                },
                "minimum-stability": {
                    "name": "minimum-stability",
                    "description": "Mininmal stability"
                },
                "authors": {
                    "name": "authors",
                    "description": "Authors of the project"
                },
                "support": {
                    "name": "support",
                    "description": "Support channels"
                },
                "required": {
                    "name": "required",
                    "description": "Required packages"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate composer file specifying the module machine name, package name, package type, package description, keywords, lincense, homepage, minimum stability, authors, support channels and required packages",
                    "execution": "drupal generate:composer \\\n  --module=\"module_name\" \\\n  --name=\"drupal\/module_name\" \\\n  --type=\"drupal-module\" \\\n  --description=\"Package description\" \\\n  --keywords='Drupal' --keywords='logging' \\\n  --license=\"GPL-2.0+\" \\\n  --homepage=\"https:\/\/www.drupal.org\/project\/module_name\" \\\n  --minimum-stability=\"stable\" \\\n  --authors='\"name\":\"Author name\", \"email\":\"author@email.com\", \"homepage\":\"http:\/\/website.com\", \"role\":\"Developer\"' \\\n  --support='\"channel\":\"email\", \"url\":\"author@email.com\"' \\\n  --support='\"channel\":\"source\", \"url\":\"http:\/\/github.com\"' \\\n  --required='\"name\":\"drupal\/views\", \"version\":\"^1.0\"' \\\n  --required='\"name\":\"drupal\/token\", \"version\":\"^2.0\"'\n"
                }
            ],
            "aliases": [
                "gcom"
            ],
            "key": "generate.composer",
            "dashed": "generate-composer",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:controller",
            "description": "Generate & Register a controller",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Controller Class name"
                },
                "routes": {
                    "name": "routes",
                    "description": "The routes, must be an array containing [title, method, path]"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                },
                "test": {
                    "name": "test",
                    "description": "Generate a test class"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate controller specifying the module name, the class name and its routes",
                    "execution": "drupal generate:controller  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultController\"  \\\n  --routes='\"title\":\"ControllerMethod\", \"name\":\"modulename.default_controller_hello\", \"method\":\"hello\", \"path\":\"\/modulename\/hello\/{name}\"'  \\\n  --test"
                }
            ],
            "aliases": [
                "gcon"
            ],
            "key": "generate.controller",
            "dashed": "generate-controller",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:entity:bundle",
            "description": "Generate a new content type (node \/ entity bundle)",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "bundle-name": {
                    "name": "bundle-name",
                    "description": "The content type's machine name"
                },
                "bundle-title": {
                    "name": "bundle-title",
                    "description": "The content type's human-readable name"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate bundle entity specifying the module, the bundle name and its title",
                    "execution": "drupal generate:entity:bundle  \\\n  --module=\"modulename\"  \\\n  --bundle-name=\"default\"  \\\n  --bundle-title=\"default\""
                }
            ],
            "aliases": [
                "geb"
            ],
            "key": "generate.entity.bundle",
            "dashed": "generate-entity-bundle",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:entity:config",
            "description": "Generate a new config entity",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "entity-class": {
                    "name": "entity-class",
                    "description": "The config entity class"
                },
                "entity-name": {
                    "name": "entity-name",
                    "description": "The config entity name"
                },
                "base-path": {
                    "name": "base-path",
                    "description": "The base-path for the config entity routes"
                },
                "label": {
                    "name": "label",
                    "description": "The label"
                },
                "bundle-of": {
                    "name": "bundle-of",
                    "description": "Acts as bundle for content entities"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate config entity specifying the module, the entity class, the entity name, its path and label",
                    "execution": "drupal generate:entity:config  \\\n  --module=\"modulename\"  \\\n  --entity-class=\"DefaultEntity\"  \\\n  --entity-name=\"default_entity\"  \\\n  --base-path=\"\/admin\/structure\"  \\\n  --label=\"Default entity\""
                }
            ],
            "aliases": [
                "gec"
            ],
            "key": "generate.entity.config",
            "dashed": "generate-entity-config",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:entity:content",
            "description": "Generate a new content entity",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "entity-class": {
                    "name": "entity-class",
                    "description": "The content entity class"
                },
                "entity-name": {
                    "name": "entity-name",
                    "description": "The content entity name"
                },
                "base-path": {
                    "name": "base-path",
                    "description": "The base-path for the content entity routes"
                },
                "label": {
                    "name": "label",
                    "description": "The label"
                },
                "has-bundles": {
                    "name": "has-bundles",
                    "description": "Entity has bundles"
                },
                "is-translatable": {
                    "name": "is-translatable",
                    "description": "Content entity translatable"
                },
                "revisionable": {
                    "name": "revisionable",
                    "description": "commands.generate.entity.content.options.revisionable"
                },
                "has-forms": {
                    "name": "has-forms",
                    "description": "Entity has forms"
                },
                "has-owner": {
                    "name": "has-owner",
                    "description": "Entity has owner"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a content entity specifying the module, the entity class, the entity name, its path and label",
                    "execution": "drupal generate:entity:content  \\\n  --module=\"modulename\"  \\\n  --entity-class=\"DefaultEntity\"  \\\n  --entity-name=\"default_entity\"  \\\n  --base-path=\"\/admin\/structure\"  \\\n  --label=\"Default entity\""
                },
                {
                    "description": "Generate a translatable and revisionable content entity specifying the module, the entity class, the entity name, its path and label",
                    "execution": "drupal generate:entity:content  \\\n  --module=\"modulename\"  \\\n  --entity-class=\"DefaultEntity\"  \\\n  --entity-name=\"default_entity\"  \\\n  --base-path=\"\/admin\/structure\"  \\\n  --label=\"Default entity\"  \\\n  --is-translatable  \\\n  --revisionable\n  --has-forms"
                }
            ],
            "aliases": [
                "geco"
            ],
            "key": "generate.entity.content",
            "dashed": "generate-entity-content",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:event:subscriber",
            "description": "Generate an event subscriber",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "name": {
                    "name": "name",
                    "description": "Service name"
                },
                "class": {
                    "name": "class",
                    "description": "Class name"
                },
                "events": {
                    "name": "events",
                    "description": "Load events from the container"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an event subscriber specifying the module name, its name, the class and the events to subscribe",
                    "execution": "drupal generate:event:subscriber  \\\n  --module=\"modulename\"  \\\n  --name=\"modulename.default\"  \\\n  --class=\"DefaultSubscriber\"  \\\n  --events='kernel_request'\n"
                }
            ],
            "aliases": [
                "ges"
            ],
            "key": "generate.event.subscriber",
            "dashed": "generate-event-subscriber",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:form",
            "description": "Generate a new \"FormBase\"",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "The form class name"
                },
                "form-id": {
                    "name": "form-id",
                    "description": "The Form id"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                },
                "config-file": {
                    "name": "config-file",
                    "description": "Add a config file"
                },
                "inputs": {
                    "name": "inputs",
                    "description": "Create inputs in a form."
                },
                "path": {
                    "name": "path",
                    "description": "Enter the form path"
                },
                "menu-link-gen": {
                    "name": "menu-link-gen",
                    "description": "Generate a menu link"
                },
                "menu-link-title": {
                    "name": "menu-link-title",
                    "description": "A title for the menu link"
                },
                "menu-parent": {
                    "name": "menu-parent",
                    "description": "Menu parent"
                },
                "menu-link-desc": {
                    "name": "menu-link-desc",
                    "description": "A description for the menu link"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an empty form with config file specifying the module name, the class, a form id and the path",
                    "execution": "drupal generate:form  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultForm\"  \\\n  --form-id=\"default_form\"  \\\n  --config-file  \\\n  --path=\"\/modulename\/form\/default\""
                },
                {
                    "description": "Generate a form with 2 fields and a config file specifying the module name, the class, a form id, the inputs and the path",
                    "execution": "drupal generate:form  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultForm\"  \\\n  --form-id=\"default_form\"  \\\n  --config-file  \\\n  --inputs='\"name\":\"inputname\", \"type\":\"text_format\", \"label\":\"InputName\", \"options\":\"\", \"description\":\"Just a text input\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'  \\\n  --inputs='\"name\":\"email\", \"type\":\"email\", \"label\":\"Email\", \"options\":\"\", \"description\":\"Just an email input\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'  \\\n  --path=\"\/modulename\/form\/default\"\n"
                }
            ],
            "aliases": [
                "gf"
            ],
            "key": "generate.form",
            "dashed": "generate-form",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:form:alter",
            "description": "Generate an implementation of hook_form_alter() or hook_form_FORM_ID_alter",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "form-id": {
                    "name": "form-id",
                    "description": "Form ID to alter"
                },
                "inputs": {
                    "name": "inputs",
                    "description": "Create inputs in a form."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a hook form alter for an empty form specifying the module name",
                    "execution": "drupal generate:form:alter  \\\n  --module=\"modulename\""
                },
                {
                    "description": "Generate a hook form alter with 2 fields specifying the module name and the inputs",
                    "execution": "drupal generate:form:alter  \\\n  --module=\"modulename\"  \\\n  --inputs='\"name\":\"inputtext\", \"type\":\"text_format\", \"label\":\"InputText\", \"options\":\"\", \"description\":\"Just an input text\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'  \\\n  --inputs='\"name\":\"email\", \"type\":\"email\", \"label\":\"Email\", \"options\":\"\", \"description\":\"Just an email input\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'"
                }
            ],
            "aliases": [
                "gfa"
            ],
            "key": "generate.form.alter",
            "dashed": "generate-form-alter",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:form:config",
            "description": "Generate a new \"ConfigFormBase\"",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "The form class name"
                },
                "form-id": {
                    "name": "form-id",
                    "description": "The Form id"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                },
                "config-file": {
                    "name": "config-file",
                    "description": "Add a config file"
                },
                "inputs": {
                    "name": "inputs",
                    "description": "Create inputs in a form."
                },
                "path": {
                    "name": "path",
                    "description": "Enter the form path"
                },
                "menu-link-gen": {
                    "name": "menu-link-gen",
                    "description": "Generate a menu link"
                },
                "menu-link-title": {
                    "name": "menu-link-title",
                    "description": "A title for the menu link"
                },
                "menu-parent": {
                    "name": "menu-parent",
                    "description": "Menu parent"
                },
                "menu-link-desc": {
                    "name": "menu-link-desc",
                    "description": "A description for the menu link"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an empty form with config file specifying the module name, the class, a form id and the path",
                    "execution": "drupal generate:form:config  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultForm\"  \\\n  --form-id=\"default_form\"  \\\n  --config-file  \\\n  --path=\"\/modulename\/form\/default\""
                },
                {
                    "description": "Generate a form with 2 fields and a config file specifying the module name, the class, a form id, the inputs and the path",
                    "execution": "drupal generate:form:config  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultForm\"  \\\n  --form-id=\"default_form\"  \\\n  --config-file  \\\n  --inputs='\"name\":\"inputname\", \"type\":\"text_format\", \"label\":\"InputName\", \"options\":\"\", \"description\":\"Just a text input\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'  \\\n  --inputs='\"name\":\"email\", \"type\":\"email\", \"label\":\"Email\", \"options\":\"\", \"description\":\"Just an email input\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'  \\\n  --path=\"\/modulename\/form\/default\"\n"
                }
            ],
            "aliases": [
                "gfc"
            ],
            "key": "generate.form.config",
            "dashed": "generate-form-config",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:help",
            "description": "Generate an implementation of hook_help()",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "description": {
                    "name": "description",
                    "description": "Module description"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a hook help specifying the module name and the description",
                    "execution": "drupal generate:help  \\\n  --module=\"modulename\"  \\\n  --description=\"My Awesome Module\""
                }
            ],
            "aliases": [
                "gh"
            ],
            "key": "generate.help",
            "dashed": "generate-help",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:jstest",
            "description": "Generate a JavaScript test.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "JavaScript test Class name"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a module specifying the module name, machine name, the path, its description, drupal core and the package name. In this example the composer file, the unit test and twig template are generated too",
                    "execution": "drupal generate:module  \\\n  --module=\"modulename\"  \\\n  --machine-name=\"modulename\"  \\\n  --module-path=\"\/modules\/custom\"  \\\n  --description=\"My Awesome Module\"  \\\n  --core=\"8.x\"  \\\n  --package=\"Custom\"  \\\n  --module-file  \\\n  --composer  \\\n  --test  \\\n  --twigtemplate\n"
                }
            ],
            "aliases": [
                "gjt"
            ],
            "key": "generate.jstest",
            "dashed": "generate-jstest",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:module",
            "description": "Generate a module.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name"
                },
                "machine-name": {
                    "name": "machine-name",
                    "description": "The machine name (lowercase and underscore only)"
                },
                "module-path": {
                    "name": "module-path",
                    "description": "The path of the module"
                },
                "description": {
                    "name": "description",
                    "description": "Module description"
                },
                "core": {
                    "name": "core",
                    "description": "Core version"
                },
                "package": {
                    "name": "package",
                    "description": "Module package"
                },
                "module-file": {
                    "name": "module-file",
                    "description": "Add a .module file"
                },
                "features-bundle": {
                    "name": "features-bundle",
                    "description": "Define module as feature using the given Features bundle name"
                },
                "composer": {
                    "name": "composer",
                    "description": "Add a composer.json file"
                },
                "dependencies": {
                    "name": "dependencies",
                    "description": "Module dependencies separated by commas (i.e. context, panels)"
                },
                "test": {
                    "name": "test",
                    "description": "Generate a test class"
                },
                "twigtemplate": {
                    "name": "twigtemplate",
                    "description": "Generate theme template"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a module specifying the module name, machine name, the path, its description, drupal core and the package name. In this example the composer file, the unit test and twig template are generated too",
                    "execution": "drupal generate:module  \\\n  --module=\"modulename\"  \\\n  --machine-name=\"modulename\"  \\\n  --module-path=\"\/modules\/custom\"  \\\n  --description=\"My Awesome Module\"  \\\n  --core=\"8.x\"  \\\n  --package=\"Custom\"  \\\n  --module-file  \\\n  --composer  \\\n  --test  \\\n  --twigtemplate\n"
                }
            ],
            "aliases": [
                "gm"
            ],
            "key": "generate.module",
            "dashed": "generate-module",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:module:file",
            "description": "Generate a .module file",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate the .module file specifying the module name",
                    "execution": "drupal generate:module:file  \\\n  --module=\"modulename\"\n"
                }
            ],
            "aliases": [
                "gmf"
            ],
            "key": "generate.module.file",
            "dashed": "generate-module-file",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:permissions",
            "description": "Generate module permissions",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "permissions": {
                    "name": "permissions",
                    "description": "Create permissions."
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [
                "gp"
            ],
            "key": "generate.permissions",
            "dashed": "generate-permissions",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:block",
            "description": "Generate a plugin block",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "plugin-label": {
                    "name": "plugin-label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "theme-region": {
                    "name": "theme-region",
                    "description": "Theme region to render Plugin Block"
                },
                "inputs": {
                    "name": "inputs",
                    "description": "Create inputs in a form."
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                },
                "twigtemplate": {
                    "name": "twigtemplate",
                    "description": "Generate theme template"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a plugin block in the header region with an input field specifying the module name, the class, the label, its id, the region and the input",
                    "execution": "drupal generate:plugin:block  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultBlock\"  \\\n  --label=\"Default block\"  \\\n  --plugin-id=\"default_block\"  \\\n  --theme-region=\"header\"  \\\n  --inputs='\"name\":\"inputtext\", \"type\":\"text_format\", \"label\":\"InputText\", \"options\":\"\", \"description\":\"Just an input text\", \"maxlength\":\"\", \"size\":\"\", \"default_value\":\"\", \"weight\":\"0\", \"fieldset\":\"\"'"
                }
            ],
            "aliases": [
                "gpb"
            ],
            "key": "generate.plugin.block",
            "dashed": "generate-plugin-block",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:ckeditorbutton",
            "description": "Generate CKEditor button plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin ID. NOTE: This corresponds to the CKEditor plugin name. It is the first argument of the CKEDITOR.plugins.add() function in the plugin.js file."
                },
                "buttons": {
                    "name": "buttons",
                    "description": "CKEditor buttons."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate plugin CKEditor button specifying the module name, the class, the label, its id, the button name and the icon path",
                    "execution": "drupal generate:plugin:ckeditorbutton  \\\n  --module=\"modulename\" \\\n  --class=\"DefaultCKEditorButton\" \\\n  --label=\"Default ckeditor button\" \\\n  --plugin-id=\"default_ckeditor_button\" \\\n  --buttons='name\":\"Default ckeditor button\", \"label\":\"Default ckeditor button\", \"icon\":\"modules\/custom\/modulename\/js\/plugins\/default_ckeditor_button\/images\/icon.png\"' \\\n  --buttons='name\":\"My ckeditor button\", \"label\":\"My ckeditor button\", \"icon\":\"modules\/custom\/modulename\/js\/plugins\/my_ckeditor_button\/images\/icon.png\"' \\\n  --no-interaction\n\ndrupal generate:plugin:ckeditorbutton  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultCKEditorButton\"  \\\n  --label=\"Default ckeditor button\"  \\\n  --plugin-id=\"default ckeditor button\"  \\\n  --button-name=\"Default ckeditor button\"  \\\n  --button-icon-path=\"modules\/custom\/modulename\/js\/plugins\/default ckeditor button\/images\/icon.png\""
                }
            ],
            "aliases": [
                "gpc"
            ],
            "key": "generate.plugin.ckeditorbutton",
            "dashed": "generate-plugin-ckeditorbutton",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:condition",
            "description": "Generate a plugin condition.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin condition class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin condition label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin condition id"
                },
                "context-definition-id": {
                    "name": "context-definition-id",
                    "description": "Context definition ID"
                },
                "context-definition-label": {
                    "name": "context-definition-label",
                    "description": "Context definition label"
                },
                "context-definition-required": {
                    "name": "context-definition-required",
                    "description": "Context definition is required (TRUE\/FALSE)"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a plugin condition for a node entity type specifying the module name, the class, the label, its id and the context definition",
                    "execution": "drupal generate:plugin:condition  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleCondition\"  \\\n  --label=\"Example condition\"  \\\n  --plugin-id=\"example_condition\"  \\\n  --context-definition-id=\"entity:node\"  \\\n  --context-definition-label=\"node\"  \\\n  --context-definition-required"
                },
                {
                    "description": "Generate a plugin condition for language specifying the module name, the class, the label, its id and the context definition",
                    "execution": "drupal generate:plugin:condition  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleCondition\"  \\\n  --label=\"Example condition\"  \\\n  --plugin-id=\"example_condition\"  \\\n  --context-definition-id=\"language\"  \\\n  --context-definition-label=\"Language\"  \\\n  --context-definition-required"
                },
                {
                    "description": "Generate a plugin condition for role configuration specifying the module name, the class, the label, its id and the context definition",
                    "execution": "drupal generate:plugin:condition  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleCondition\"  \\\n  --label=\"Example condition\"  \\\n  --plugin-id=\"example_condition\"  \\\n  --context-definition-id=\"entity:user_role\"  \\\n  --context-definition-label=\"user_role\"  \\\n  --context-definition-required\n"
                }
            ],
            "aliases": [
                "gpco"
            ],
            "key": "generate.plugin.condition",
            "dashed": "generate-plugin-condition",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:field",
            "description": "Generate field type, widget and formatter plugins.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "type-class": {
                    "name": "type-class",
                    "description": "Field type plugin class name"
                },
                "type-label": {
                    "name": "type-label",
                    "description": "Field type plugin label"
                },
                "type-plugin-id": {
                    "name": "type-plugin-id",
                    "description": "Field type plugin id"
                },
                "type-description": {
                    "name": "type-description",
                    "description": "Field type plugin description"
                },
                "formatter-class": {
                    "name": "formatter-class",
                    "description": "Field formatter plugin class name"
                },
                "formatter-label": {
                    "name": "formatter-label",
                    "description": "Field formatter plugin label"
                },
                "formatter-plugin-id": {
                    "name": "formatter-plugin-id",
                    "description": "Field formatter plugin id"
                },
                "widget-class": {
                    "name": "widget-class",
                    "description": "Field formatter plugin class name"
                },
                "widget-label": {
                    "name": "widget-label",
                    "description": "Field widget plugin label"
                },
                "widget-plugin-id": {
                    "name": "widget-plugin-id",
                    "description": "Field widget plugin id"
                },
                "field-type": {
                    "name": "field-type",
                    "description": "Field type the formatter and widget plugin can be used with"
                },
                "default-widget": {
                    "name": "default-widget",
                    "description": "Default field widget of the field type plugin"
                },
                "default-formatter": {
                    "name": "default-formatter",
                    "description": "Default field formatter of field type plugin"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate field type, widget and formatter plugins specifying the module name, the type (class, label, plugin id and description), the formatter (class, label, plugin id) and the widget (class, label and plugin id)",
                    "execution": "drupal generate:plugin:field  \\\n  --module=\"modulename\"  \\\n  --type-class=\"ExampleFieldType\"  \\\n  --type-label=\"Example field type\"  \\\n  --type-plugin-id=\"example_field_type\"  \\\n  --type-description=\"My Field Type\"  \\\n  --formatter-class=\"ExampleFormatterType\"  \\\n  --formatter-label=\"Example formatter type\"  \\\n  --formatter-plugin-id=\"example_formatter_type\"  \\\n  --widget-class=\"ExampleWidgetType\"  \\\n  --widget-label=\"Example widget type\"  \\\n  --widget-plugin-id=\"example_widget_type\"  \\\n  --field-type=\"example_field_type\"  \\\n  --default-widget=\"example_widget_type\"  \\\n  --default-formatter=\"example_formatter_type\"\n"
                }
            ],
            "aliases": [
                "gpf"
            ],
            "key": "generate.plugin.field",
            "dashed": "generate-plugin-field",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:fieldformatter",
            "description": "Generate field formatter plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "field-type": {
                    "name": "field-type",
                    "description": "Field type the plugin can be used with"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a text field formatter plugin specifying the module name, the class, the label its plugin id and the field type",
                    "execution": "drupal generate:plugin:fieldformatter  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleFieldFormatter\"  \\\n  --label=\"Example field formatter\"  \\\n  --plugin-id=\"example_field_formatter\"  \\\n  --field-type=\"text\"\n"
                }
            ],
            "aliases": [
                "gpff"
            ],
            "key": "generate.plugin.fieldformatter",
            "dashed": "generate-plugin-fieldformatter",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:fieldtype",
            "description": "Generate field type plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "description": {
                    "name": "description",
                    "description": "Plugin Description"
                },
                "default-widget": {
                    "name": "default-widget",
                    "description": "Default field widget of this plugin"
                },
                "default-formatter": {
                    "name": "default-formatter",
                    "description": "Default field formatter of this plugin"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a field type plugin specifying the module name, the class, its label, the plugin id and a description",
                    "execution": "drupal generate:plugin:fieldtype  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleFieldType\"  \\\n  --label=\"Example field type\"  \\\n  --plugin-id=\"example_field_type\"  \\\n  --description=\"My Field Type\""
                },
                {
                    "description": "Generate a field type plugin with a default widget and formatter specifying the module name, the class, its label, the plugin id and a description",
                    "execution": "drupal generate:plugin:fieldtype  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleFieldType\"  \\\n  --label=\"Example field type\"  \\\n  --plugin-id=\"example_field_type\"  \\\n  --description=\"My Field Type\"  \\\n  --default-widget=\"DefaultWidget\"  \\\n  --default-formatter=\"DefaultFormatter\"\n"
                }
            ],
            "aliases": [
                "gpft"
            ],
            "key": "generate.plugin.fieldtype",
            "dashed": "generate-plugin-fieldtype",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:fieldwidget",
            "description": "Generate field widget plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "field-type": {
                    "name": "field-type",
                    "description": "Field type the plugin can be used with"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a text type field widget plugin specifying the module name, the class, its label, the plugin id and the field type",
                    "execution": "drupal generate:plugin:fieldwidget  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleFieldWidget\"  \\\n  --label=\"Example field widget\"  \\\n  --plugin-id=\"example_field_widget\"  \\\n  --field-type=\"text\"\n"
                }
            ],
            "aliases": [
                "gpfw"
            ],
            "key": "generate.plugin.fieldwidget",
            "dashed": "generate-plugin-fieldwidget",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:imageeffect",
            "description": "Generate image effect plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "description": {
                    "name": "description",
                    "description": "Plugin Description"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a image effect plugin specifying the module name, the class, its label, the plugin id and a description",
                    "execution": "drupal generate:plugin:imageeffect  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultImageEffect\"  \\\n  --label=\"Default image effect\"  \\\n  --plugin-id=\"default_image_effect\"  \\\n  --description=\"My Image Effect\"\n"
                }
            ],
            "aliases": [
                "gpie"
            ],
            "key": "generate.plugin.imageeffect",
            "dashed": "generate-plugin-imageeffect",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:imageformatter",
            "description": "Generate image formatter plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a image formatter plugin specifying the module name, the class, its label and the plugin id",
                    "execution": "drupal generate:plugin:imageformatter  \\\n  --module=\"modulename\"  \\\n  --class=\"ExampleImageFormatter\"  \\\n  --label=\"Example image formatter\"  \\\n  --plugin-id=\"example_image_formatter\"\n"
                }
            ],
            "aliases": [
                "gpif"
            ],
            "key": "generate.plugin.imageformatter",
            "dashed": "generate-plugin-imageformatter",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:mail",
            "description": "Generate a plugin mail",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an email plugin specifying the module name, the class, its label and the plugin id",
                    "execution": "drupal generate:plugin:mail  \\\n  --module=\"modulename\"  \\\n  --class=\"HtmlFormatterMail\"  \\\n  --label=\"Html formatter mail\"  \\\n  --plugin-id=\"html_formatter_mail\"\n"
                }
            ],
            "aliases": [
                "gpm"
            ],
            "key": "generate.plugin.mail",
            "dashed": "generate-plugin-mail",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:migrate:dataparser",
            "description": "Generate a migrate data parser",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "plugin-title": {
                    "name": "plugin-title",
                    "description": "Plugin title"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a migration data parser specifying the module name, the class, the plugin id and the plugin title",
                    "execution": "drupal generate:plugin:migrate:source  \\\n  --module=\"modulename\"  \\\n  --class=\"PluginClassName\"  \\\n  --plugin-id=\"plugin_class_name\"  \\\n  --plugin-title=\"Data parser\"\n"
                }
            ],
            "aliases": [
                "gpmdp"
            ],
            "key": "generate.plugin.migrate.dataparser",
            "dashed": "generate-plugin-migrate-dataparser",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:migrate:process",
            "description": "Generate a migrate process plugin",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a migration plugin process specifying the module name, the class and its id",
                    "execution": "drupal generate:plugin:migrate:process  \\\n  --module=\"modulename\"  \\\n  --class=\"MigrationProcess\"  \\\n  --plugin-id=\"migrationprocess\"\n"
                }
            ],
            "aliases": [
                "gpmp"
            ],
            "key": "generate.plugin.migrate.process",
            "dashed": "generate-plugin-migrate-process",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:migrate:source",
            "description": "Generate a migrate source plugin",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "table": {
                    "name": "table",
                    "description": "Table to query"
                },
                "alias": {
                    "name": "alias",
                    "description": "Short alias to refer to the table as"
                },
                "group-by": {
                    "name": "group-by",
                    "description": "Field to group results by"
                },
                "fields": {
                    "name": "fields",
                    "description": "Fields to export"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a migration source plugin specifying the module name, the class, its plugin id, the table and its alias",
                    "execution": "drupal generate:plugin:migrate:source  \\\n  --module=\"modulename\"  \\\n  --class=\"PluginClassName\"  \\\n  --plugin-id=\"plugin_class_name\"  \\\n  --table=\"DefaultTableName\"  \\\n  --alias=\"D\""
                },
                {
                    "description": "Generate a migration source plugin for specific fields of the users table specifying the module name, the class, its plugin id, the table, its alias and the fields",
                    "execution": "drupal generate:plugin:migrate:source  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultPluginClass\"  \\\n  --plugin-id=\"default_plugin_class\"  \\\n  --table=\"users\"  \\\n  --alias=\"u\"  \\\n  --fields='\"id\":\"id\", \"description\":\"the user id\"'  \\\n  --fields='\"id\":\"username\", \"description\":\"the username\"'  \\\n  --fields='\"id\":\"password\", \"description\":\"the user password\"'  \\\n  --fields='\"id\":\"email\", \"description\":\"the user email\"'\n"
                }
            ],
            "aliases": [
                "gpms"
            ],
            "key": "generate.plugin.migrate.source",
            "dashed": "generate-plugin-migrate-source",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:queue",
            "description": "Drupal Console Queueworker generator.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The module name"
                },
                "class": {
                    "name": "class",
                    "description": "QueueWorker file name"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin QueueWorker id"
                },
                "cron-time": {
                    "name": "cron-time",
                    "description": "Cron time"
                },
                "label": {
                    "name": "label",
                    "description": "Queue description"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a queue worker plugin specifying the module name, the class and its plugin id",
                    "execution": "drupal generate:plugin:queue  \\\n  --module=\"modulename\"  \\\n  --class=\"PluginClassName\"  \\\n  --plugin-id=\"plugin_class_name\"  \\\n  --cron-time=\"30\"  \\\n  --label=\"Example QueueWorker\""
                }
            ],
            "aliases": [
                "gpqueue"
            ],
            "key": "generate.plugin.queue",
            "dashed": "generate-plugin-queue",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:rest:resource",
            "description": "Generate plugin rest resource",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin Rest Resource class"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin Rest Resource id"
                },
                "plugin-label": {
                    "name": "plugin-label",
                    "description": "Plugin Rest Resource Label"
                },
                "plugin-url": {
                    "name": "plugin-url",
                    "description": "Plugin Rest Resource URL"
                },
                "plugin-states": {
                    "name": "plugin-states",
                    "description": "Plugin Rest Resource States"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a rest resource plugin using GET specifying the module name, the class, the plugin id, its label, the target url and the request type",
                    "execution": "drupal generate:plugin:rest:resource  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultRestResource\"  \\\n  --plugin-id=\"default_rest_resource\"  \\\n  --plugin-label=\"Default rest resource\"  \\\n  --plugin-url=\"http:\/\/rest.resources.example.com\"  \\\n  --plugin-states='GET'\n"
                }
            ],
            "aliases": [
                "gprr"
            ],
            "key": "generate.plugin.rest.resource",
            "dashed": "generate-plugin-rest-resource",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:rules:action",
            "description": "Generate a plugin rule action",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "category": {
                    "name": "category",
                    "description": "Plugin category"
                },
                "context": {
                    "name": "context",
                    "description": "Plugin context"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a user rule action plugin specifying the module name, the class, its label, the plugin id, the type, the category and its context",
                    "execution": "drupal generate:plugin:rules:action \\\n  --module=\"modulename\" \\\n  --class=\"DefaultAction\" \\\n  --label=\"Default Action\" \\\n  --plugin-id=\"default_action\" \\\n  --category=\"Action category\" \\\n  --context='\"name\":\"user\", \"type\":\"entity:user\", \"label\":\"Context label\", \"description\":\"Context description\"'"
                },
                {
                    "description": "Generate a entity rule action plugin specifying the module name, the class, its label, the plugin id, the type, the category and its context",
                    "execution": "drupal generate:plugin:rules:action \\\n  --module=\"modulename\" \\\n  --class=\"DefaultAction\" \\\n  --label=\"Default Action\" \\\n  --plugin-id=\"default_action\" \\\n  --category=\"Action category\" \\\n  --context='\"entity\":\"node\", \"type\":\"entity\", \"label\":\"Context label\", \"description\":\"Context description\"'\n"
                }
            ],
            "aliases": [
                "gpra"
            ],
            "key": "generate.plugin.rules.action",
            "dashed": "generate-plugin-rules-action",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:rules:dataprocessor",
            "description": "Generate a plugin rule dataprocessor",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a user rule dataprocessor plugin specifying the module name, the class, its label, the plugin id, the type, the category and its context",
                    "execution": "drupal generate:plugin:rules:dataprocessor  \\\n  --module=\"modulename\"  \\\n  --class=\"DefaultDataprocessor\"  \\\n  --label=\"Default dataprocessor\"  \\\n  --plugin-id=\"default_dataprocessor\"  \\\n"
                }
            ],
            "aliases": [
                "gprd"
            ],
            "key": "generate.plugin.rules.dataprocessor",
            "dashed": "generate-plugin-rules-dataprocessor",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:skeleton",
            "description": "Generate an implementation of a skeleton plugin",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "The Plugin Id."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a plugin skeleton specifying module name, the plugin id and the class",
                    "execution": "drupal generate:plugin:skeleton  \\\n  --module=\"modulename\"  \\\n  --plugin-id=\"link_relation_type\"  \\\n  --class=\"DefaultLinkRelationType\"\n"
                }
            ],
            "aliases": [
                "gps"
            ],
            "key": "generate.plugin.skeleton",
            "dashed": "generate-plugin-skeleton",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:type:annotation",
            "description": "Generate a plugin type with annotation discovery",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin type class name"
                },
                "machine-name": {
                    "name": "machine-name",
                    "description": "commands.generate.plugin.type.annotation.options.plugin-id"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin type label"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a plugin with annotation discovery specifying module name, class name, machine name and label",
                    "execution": "drupal generate:plugin:type:annotation  \\\n  --module=\"modulename\"  \\\n  --class=\"ExamplePlugin\"  \\\n  --machine-name=\"example_plugin\"  \\\n  --label=\"Example plugin\"\n"
                }
            ],
            "aliases": [
                "gpta"
            ],
            "key": "generate.plugin.type.annotation",
            "dashed": "generate-plugin-type-annotation",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:type:yaml",
            "description": "Generate a plugin type with Yaml discovery",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin type class name"
                },
                "plugin-name": {
                    "name": "plugin-name",
                    "description": "Plugin type machine name"
                },
                "plugin-file-name": {
                    "name": "plugin-file-name",
                    "description": "Plugin file name"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a plugin with Yaml discovery specifying module name, class name, plugin name and plugin file name",
                    "execution": "drupal generate:plugin:type:yaml  \\\n  --module=\"modulename\"  \\\n  --class=\"ExamplePlugin\"  \\\n  --plugin-name=\"example_plugin\"  \\\n  --plugin-file-name=\"example.plugin\"\n"
                }
            ],
            "aliases": [
                "gpty"
            ],
            "key": "generate.plugin.type.yaml",
            "dashed": "generate-plugin-type-yaml",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:validationconstraint",
            "description": "Generate a validation constraint plugin.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "class": {
                    "name": "class",
                    "description": "Plugin class name"
                },
                "label": {
                    "name": "label",
                    "description": "Plugin label"
                },
                "plugin-id": {
                    "name": "plugin-id",
                    "description": "Plugin id"
                },
                "hook": {
                    "name": "hook",
                    "description": "Generate hook to validate a field"
                },
                "field-id": {
                    "name": "field-id",
                    "description": "Field id"
                },
                "bundle": {
                    "name": "bundle",
                    "description": "Bundle"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a validation constraint plugin specifying the module name, the class, its label, the plugin id, the entity bundle and the field id",
                    "execution": "drupal generate:plugin:validationconstraint  \\\n  --module=\"modulename\" \\\n  --class=\"ExampleConstraint\" \\\n  --label=\"Example validation constraint\" \\\n  -plugin-id=\"example_validation_constraint\" \\\n  --hook \\\n  --field-id=\"field_exmaple_id\" \\\n  --bundle=\"entity_example_bundle\" \\\n  --no-interaction\n"
                }
            ],
            "aliases": [
                "gpvc"
            ],
            "key": "generate.plugin.validationconstraint",
            "dashed": "generate-plugin-validationconstraint",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:plugin:views:field",
            "description": "Generate a custom plugin view field.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "fields": {
                    "name": "fields",
                    "description": "Fields definition (class name, title and description)."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a custom view field plugin specifying the module name, the class, a title and its description",
                    "execution": "drupal generate:plugin:views:field  \\\n  --module=\"modulename\"  \\\n  --class=\"CustomViewsField\"  \\\n  --title=\"Custom views field\"  \\\n  --description=\"My awesome custom views field plugin.\"\n"
                }
            ],
            "aliases": [
                "gpvf"
            ],
            "key": "generate.plugin.views.field",
            "dashed": "generate-plugin-views-field",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:post:update",
            "description": "Generate an implementation of hook_post_update_NAME()",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "post-update-name": {
                    "name": "post-update-name",
                    "description": "Post Update Name"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an implementation of post update hook specifying the module name and the post update name",
                    "execution": "drupal generate:post:update  \\\n  --module=\"modulename\"  \\\n  --post-update-name=\"PostUpdateName\"\n"
                }
            ],
            "aliases": [
                "gpu"
            ],
            "key": "generate.post.update",
            "dashed": "generate-post-update",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:profile",
            "description": "Generate a profile.",
            "options": {
                "profile": {
                    "name": "profile",
                    "description": "The profile name"
                },
                "machine-name": {
                    "name": "machine-name",
                    "description": "The machine name (lowercase and underscore only)"
                },
                "profile-path": {
                    "name": "profile-path",
                    "description": "The path of the profile"
                },
                "description": {
                    "name": "description",
                    "description": "Profile description"
                },
                "core": {
                    "name": "core",
                    "description": "Core version"
                },
                "dependencies": {
                    "name": "dependencies",
                    "description": "Module dependencies separated by commas (i.e. context, panels)"
                },
                "themes": {
                    "name": "themes",
                    "description": "the theme name"
                },
                "distribution": {
                    "name": "distribution",
                    "description": "The distribution name"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a profile specifying the profile name, the machine name, a description, the core and its module dependencies",
                    "execution": "drupal generate:profile  \\\n  --profile=\"NewProfileName\"  \\\n  --machine-name=\"newprofilename\"  \\\n  --description=\"My Useful Profile\"  \\\n  --core=\"8.x\"  \\\n  --dependencies=\"modulename\"\n"
                }
            ],
            "aliases": [
                "gpr"
            ],
            "key": "generate.profile",
            "dashed": "generate-profile",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:routesubscriber",
            "description": "Generate a RouteSubscriber",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "name": {
                    "name": "name",
                    "description": "Service name"
                },
                "class": {
                    "name": "class",
                    "description": "Class name"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a route subscriber specifying the module name, the route name and its class",
                    "execution": "drupal generate:routesubscriber  \\\n  --module=\"modulename\"  \\\n  --name=\"modulename.route_subscriber\"  \\\n  --class=\"RouteSubscriber\"\n"
                }
            ],
            "aliases": [
                "gr"
            ],
            "key": "generate.routesubscriber",
            "dashed": "generate-routesubscriber",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:service",
            "description": "Generate service",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "name": {
                    "name": "name",
                    "description": "Service name"
                },
                "class": {
                    "name": "class",
                    "description": "Class name"
                },
                "interface": {
                    "name": "interface",
                    "description": "Interface"
                },
                "interface-name": {
                    "name": "interface-name",
                    "description": "Interface name"
                },
                "logger-channel": {
                    "name": "logger-channel",
                    "description": "Logger channel"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                },
                "path-service": {
                    "name": "path-service",
                    "description": "Path"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a services without interface specifying the module name, the service name, the class and its path",
                    "execution": "drupal generate:service  \\\n  --module=\"modulename\"  \\\n  --name=\"modulename.default\"  \\\n  --class=\"DefaultService\"  \\\n  --path-service=\"\/modules\/custom\/modulename\/src\/\""
                },
                {
                    "description": "Generate a services with interface specifying the module name, the service name, the class, the interface name and its path",
                    "execution": "drupal generate:service  \\\n  --module=\"modulename\"  \\\n  --name=\"modulename.default\"  \\\n  --class=\"DefaultService\"  \\\n  --interface  \\\n  --interface-name=\"InterfaceName\"  \\\n  --path-service=\"\/modules\/custom\/modulename\/src\/\"\n"
                }
            ],
            "aliases": [
                "gs"
            ],
            "key": "generate.service",
            "dashed": "generate-service",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:site:alias",
            "description": "Generates a site alias.",
            "options": {
                "site": {
                    "name": "site",
                    "description": "Use local site as destination."
                },
                "name": {
                    "name": "name",
                    "description": "Site name."
                },
                "environment": {
                    "name": "environment",
                    "description": "Environment name."
                },
                "type": {
                    "name": "type",
                    "description": "The site type."
                },
                "composer-root": {
                    "name": "composer-root",
                    "description": "The Drupal root project directory."
                },
                "site-uri": {
                    "name": "site-uri",
                    "description": "Drupal uri (for multi-sites)."
                },
                "host": {
                    "name": "host",
                    "description": "The ip\/domain name of the remote system. Not required on local sites."
                },
                "user": {
                    "name": "user",
                    "description": "The username to use when connecting via ssh."
                },
                "port": {
                    "name": "port",
                    "description": "The port to use when connecting via ssh."
                },
                "drupal-console-binary": {
                    "name": "drupal-console-binary",
                    "description": "The name of your drupal console binary. By default is \"drupal\""
                },
                "extra-options": {
                    "name": "extra-options",
                    "description": "Used only when the target requires extra options, such as tty option and\/or alternative authentication method and\/or alternative identity file."
                },
                "directory": {
                    "name": "directory",
                    "description": "Directory to store the generated site alias."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate site alias to connect with ssh using tty as extra-option",
                    "execution": "drupal generate:site:alias  \\\n  --name=\"demo\"  \\\n  --environment=\"dev\"  \\\n  --type=\"ssh\" \\\n  --composer-root=\"\/path\/to\/remote\/project\" \\\n  --site-uri=\"default\" \\\n  --host=\"hostName\/domain\" \\\n  --user=\"userName\" \\\n  --port=\"port\" \\\n  --drupal-console-binary=\"drupal\" \\\n  --extra-options=\"-tt\" \\\n  --directory=\"\/Users\/hjuarez\/drupalSq\/console\/\""
                }
            ],
            "aliases": [
                "gsa"
            ],
            "key": "generate.site.alias",
            "dashed": "generate-site-alias",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:theme",
            "description": "Generate a theme.",
            "options": {
                "theme": {
                    "name": "theme",
                    "description": "The theme name"
                },
                "machine-name": {
                    "name": "machine-name",
                    "description": "The machine name (lowercase and underscore only)"
                },
                "theme-path": {
                    "name": "theme-path",
                    "description": "The path of the theme"
                },
                "description": {
                    "name": "description",
                    "description": "Theme description"
                },
                "core": {
                    "name": "core",
                    "description": "Core version"
                },
                "package": {
                    "name": "package",
                    "description": "Theme package"
                },
                "global-library": {
                    "name": "global-library",
                    "description": "Global styling library name"
                },
                "libraries": {
                    "name": "libraries",
                    "description": "Libraries"
                },
                "base-theme": {
                    "name": "base-theme",
                    "description": "Base theme (i.e. classy, stable)"
                },
                "regions": {
                    "name": "regions",
                    "description": "Regions"
                },
                "breakpoints": {
                    "name": "breakpoints",
                    "description": "Breakpoints"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a theme without region and without breakpoint specifying the theme name, its machine name, the theme path, a description, the drupal core, the package name and the global library",
                    "execution": "drupal generate:theme  \\\n  --theme=\"AnotherTheme\"  \\\n  --machine-name=\"anothertheme\"  \\\n  --theme-path=\"themes\/custom\"  \\\n  --description=\"My Awesome theme\"  \\\n  --core=\"8.x\"  \\\n  --package=\"PackageName\"  \\\n  --global-library=\"global-styling\"  \\\n  --base-theme=\"false\""
                },
                {
                    "description": "Generate a theme base on stable theme with two region defined and one breakpoint specifying the theme name, its machine name, the theme path, a description, the drupal core, the package name, a global library, its base, the regions and the breakpoint",
                    "execution": "drupal generate:theme \\\n  --theme=\"MyTheme\" \\\n  --machine-name=\"mytheme\" \\\n  --theme-path=\"themes\/custom\" \\\n  --description=\"My Awesome theme\" \\\n  --core=\"8.x\" \\\n  --package=\"MyThemePackage\" \\\n  --global-library=\"global-styling\" \\\n  --base-theme=\"stable\" \\\n  --regions='\"region_name\":\"Content\", \"region_machine_name\":\"content\"' \\\n  --regions='\"region_name\":\"Panel\", \"region_machine_name\":\"panel\"' \\\n  --breakpoints='\"breakpoint_name\":\"narrow\", \"breakpoint_label\":\"narrow\", \"breakpoint_media_query\":\"all and (min-width: 560px) and (max-width: 850px)\", \"breakpoint_weight\":\"1\", \"breakpoint_multipliers\":\"1x\"'\n"
                }
            ],
            "aliases": [
                "gt"
            ],
            "key": "generate.theme",
            "dashed": "generate-theme",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:twig:extension",
            "description": "Generate a Twig extension.",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "name": {
                    "name": "name",
                    "description": "Twig Extension name"
                },
                "class": {
                    "name": "class",
                    "description": "Class name"
                },
                "services": {
                    "name": "services",
                    "description": "Load services from the container."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate a twig extension specifying the module name, the extension name and its class",
                    "execution": "drupal generate:twig:extension  \\\n  --module=\"modulename\"  \\\n  --name=\"modulename.twig.extension\"  \\\n  --class=\"DefaultTwigExtension\"\n"
                }
            ],
            "aliases": [
                "gte"
            ],
            "key": "generate.twig.extension",
            "dashed": "generate-twig-extension",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "generate:update",
            "description": "Generate an implementation of hook_update_N()",
            "options": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "update-n": {
                    "name": "update-n",
                    "description": "Update Number"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Generate an update N hook implementation specifying the module name and the N value",
                    "execution": "drupal generate:update  \\\n  --module=\"modulename\"  \\\n  --update-n=\"8001\"\n"
                }
            ],
            "aliases": [
                "gu"
            ],
            "key": "generate.update",
            "dashed": "generate-update",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "image:styles:flush",
            "description": "Execute flush function by image style or execute all flush images styles",
            "options": [],
            "arguments": {
                "styles": {
                    "name": "styles",
                    "description": "The Images Styles name."
                }
            },
            "examples": [
                {
                    "description": "Flush large image style",
                    "execution": "drupal image:styles:flush  large\n"
                },
                {
                    "description": "Flush thumbnail image style",
                    "execution": "drupal image:styles:flush  thumbnail\n"
                }
            ],
            "aliases": [
                "isf"
            ],
            "key": "image.styles.flush",
            "dashed": "image-styles-flush",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "module:dependency:install",
            "description": "Install dependencies module in the application",
            "options": [],
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "Module or modules to be enabled should be separated by a space"
                }
            },
            "examples": [
                {
                    "description": "Install the dependencies of the specfied module",
                    "execution": "drupal module:dependency:install  modulename\n"
                }
            ],
            "aliases": [
                "modi"
            ],
            "key": "module.dependency.install",
            "dashed": "module-dependency-install",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "module:download",
            "description": "Download module or modules in application",
            "options": {
                "path": {
                    "name": "path",
                    "description": "The path of the contrib project"
                },
                "latest": {
                    "name": "latest",
                    "description": "Default to download most recent version"
                },
                "composer": {
                    "name": "composer",
                    "description": "Download the module using Composer"
                },
                "unstable": {
                    "name": "unstable",
                    "description": "Module unstable"
                }
            },
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "Module or modules to be enabled should be separated by a space"
                }
            },
            "examples": [
                {
                    "description": "Download module specifying module name and its path",
                    "execution": "drupal module:download  modulename  \\\n  --path=\"modules\/contrib\"\n"
                }
            ],
            "aliases": [
                "mod"
            ],
            "key": "module.download",
            "dashed": "module-download",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "module:install",
            "description": "Install module or modules in the application",
            "options": {
                "latest": {
                    "name": "latest",
                    "description": "Default to download most recent version"
                },
                "composer": {
                    "name": "composer",
                    "description": "Download the module using Composer"
                }
            },
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "Module or modules to be enabled should be separated by a space"
                }
            },
            "examples": [
                {
                    "description": "Install module specifying the module name",
                    "execution": "drupal module:install  modulename\n"
                }
            ],
            "aliases": [
                "moi"
            ],
            "key": "module.install",
            "dashed": "module-install",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "module:path",
            "description": "Returns the relative path to the module (or absolute path)",
            "options": {
                "absolute": {
                    "name": "absolute",
                    "description": "Return module absolute path"
                }
            },
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "The Module name (machine name)"
                }
            },
            "examples": [
                {
                    "description": "Get the relative path of the module specifying the module name",
                    "execution": "drupal module:path  modulename\n"
                }
            ],
            "aliases": [
                "mop"
            ],
            "key": "module.path",
            "dashed": "module-path",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "module:uninstall",
            "description": "Uninstall module or modules in the application",
            "options": {
                "force": {
                    "name": "force",
                    "description": "Do you want to ignore dependencies and forcefully uninstall the module?"
                },
                "composer": {
                    "name": "composer",
                    "description": "Uninstalls the module using Composer"
                }
            },
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "Module or modules to be uninstalled should be separated by a space"
                }
            },
            "examples": [
                {
                    "description": "Uninstall the module specifying the module name",
                    "execution": "drupal module:uninstall  modulename\n"
                }
            ],
            "aliases": [
                "mou"
            ],
            "key": "module.uninstall",
            "dashed": "module-uninstall",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "module:update",
            "description": "Update core, module or modules in the application",
            "options": {
                "composer": {
                    "name": "composer",
                    "description": "Update the module using Composer"
                },
                "simulate": {
                    "name": "simulate",
                    "description": "Simulate the update process with Composer"
                }
            },
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "Module or modules to be updated should be separated by a space. Leave empty for updating the core and all your modules managed by Composer."
                }
            },
            "examples": [
                {
                    "description": "Update module specifying module name and composer parameter",
                    "execution": "drupal module:update  modulename  \\\n  --composer\n"
                }
            ],
            "aliases": [
                "moup"
            ],
            "key": "module.update",
            "dashed": "module-update",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "multisite:new",
            "description": "Sets up the files for a new multisite install.",
            "options": {
                "copy-default": {
                    "name": "copy-default",
                    "description": "Copies existing site from the default install."
                }
            },
            "arguments": {
                "directory": {
                    "name": "directory",
                    "description": "Name of directory under 'sites' which should be created."
                },
                "uri": {
                    "name": "uri",
                    "description": "Site URI to add to sites.php."
                }
            },
            "examples": [
                {
                    "description": "Set up files for a multisite install specifying destination path and uri",
                    "execution": "drupal multisite:new  vendor\/newsite http:\/\/mysite.example.com\n"
                }
            ],
            "aliases": [
                "mun",
                "sn"
            ],
            "key": "multisite.new",
            "dashed": "multisite-new",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "multisite:update",
            "description": "Update the files for a multisite installed.",
            "options": {
                "directory": {
                    "name": "directory",
                    "description": "Name of new directory for multisite installed. (You could create subdir separated by '\/')"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Update the files for a multisite installed specifying old path and new path",
                    "execution": "drupal multisite:update\n"
                }
            ],
            "aliases": [
                "muu"
            ],
            "key": "multisite.update",
            "dashed": "multisite-update",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "node:access:rebuild",
            "description": "Rebuild node access permissions.",
            "options": {
                "batch": {
                    "name": "batch",
                    "description": "Process in batch mode."
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Rebuild node access permissions",
                    "execution": "drupal node:access:rebuild --batch"
                }
            ],
            "aliases": [
                "nar"
            ],
            "key": "node.access.rebuild",
            "dashed": "node-access-rebuild",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "queue:run",
            "description": "Process the selected queue.",
            "options": [],
            "arguments": {
                "name": {
                    "name": "name",
                    "description": "Queue name."
                }
            },
            "examples": [],
            "aliases": [
                "qr"
            ],
            "key": "queue.run",
            "dashed": "queue-run",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "quick:start",
            "description": "Download, install and serve a new Drupal project",
            "options": {
                "file": {
                    "name": "file",
                    "description": ""
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "quick.start",
            "dashed": "quick-start",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "role:delete",
            "description": "Delete roles for the application",
            "options": [],
            "arguments": {
                "roles": {
                    "name": "roles",
                    "description": "commands.role.delete.argument.roles"
                }
            },
            "examples": [
                {
                    "description": "Delete role specifying rolename",
                    "execution": "drupal role:delete  moderator\n"
                }
            ],
            "aliases": [
                "rd"
            ],
            "key": "role.delete",
            "dashed": "role-delete",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "role:new",
            "description": "Create roles for the application",
            "options": [],
            "arguments": {
                "rolename": {
                    "name": "rolename",
                    "description": "commands.role.new.argument.rolename"
                },
                "machine-name": {
                    "name": "machine-name",
                    "description": "commands.role.new.argument.machine-name"
                }
            },
            "examples": [
                {
                    "description": "Create role specifying rolename and machine-name",
                    "execution": "drupal role:new  moderator moderator\n"
                }
            ],
            "aliases": [
                "rn"
            ],
            "key": "role.new",
            "dashed": "role-new",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "router:rebuild",
            "description": "Rebuild routes for the application",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Rebuild routes",
                    "execution": "drupal router:rebuild"
                }
            ],
            "aliases": [
                "rr",
                "ror"
            ],
            "key": "router.rebuild",
            "dashed": "router-rebuild",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "settings:set",
            "description": "Change a specific setting value in DrupalConsole config file",
            "options": [],
            "arguments": {
                "name": {
                    "name": "name",
                    "description": "Setting name in YAML flatten format to set a value in Drupal Console config file"
                },
                "value": {
                    "name": "value",
                    "description": "Setting value to set in Drupal Console config file"
                }
            },
            "examples": [
                {
                    "description": "Set application language setting value to \"es\"",
                    "execution": "drupal settings:set  application.language es"
                }
            ],
            "aliases": [],
            "key": "settings.set",
            "dashed": "settings-set",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:import:local",
            "description": "Import\/Configure an existing local Drupal project",
            "options": {
                "environment": {
                    "name": "environment",
                    "description": "Name of the environment that is going to be imported"
                }
            },
            "arguments": {
                "name": {
                    "name": "name",
                    "description": "Name that will be used to generate the site config"
                },
                "directory": {
                    "name": "directory",
                    "description": "Existing Drupal root directory"
                }
            },
            "examples": [
                {
                    "description": "Import local drupal project specifying the site name and the path",
                    "execution": "drupal site:import:local  SiteName \/private\/var\/www\/vhost\/anexusit\/drupal8.dev\/web"
                }
            ],
            "aliases": [
                "sil"
            ],
            "key": "site.import.local",
            "dashed": "site-import-local",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:install",
            "description": "Install a Drupal project",
            "options": {
                "langcode": {
                    "name": "langcode",
                    "description": "Drupal language"
                },
                "db-type": {
                    "name": "db-type",
                    "description": "Drupal Database type to be used in install"
                },
                "db-file": {
                    "name": "db-file",
                    "description": "Drupal Database file to be used in install"
                },
                "db-host": {
                    "name": "db-host",
                    "description": "Database Host"
                },
                "db-name": {
                    "name": "db-name",
                    "description": "Database Name"
                },
                "db-user": {
                    "name": "db-user",
                    "description": "Database User"
                },
                "db-pass": {
                    "name": "db-pass",
                    "description": "Database Pass"
                },
                "db-prefix": {
                    "name": "db-prefix",
                    "description": "Database Prefix"
                },
                "db-port": {
                    "name": "db-port",
                    "description": "Database Port"
                },
                "site-name": {
                    "name": "site-name",
                    "description": "Drupal site name"
                },
                "site-mail": {
                    "name": "site-mail",
                    "description": "Drupal site mail"
                },
                "account-name": {
                    "name": "account-name",
                    "description": "Drupal administrator account name"
                },
                "account-mail": {
                    "name": "account-mail",
                    "description": "Drupal administrator account mail"
                },
                "account-pass": {
                    "name": "account-pass",
                    "description": "Drupal administrator account password"
                },
                "force": {
                    "name": "force",
                    "description": "Force to reinstall the site"
                }
            },
            "arguments": {
                "profile": {
                    "name": "profile",
                    "description": "Drupal Profile to be installed"
                },
                "db-url": {
                    "name": "db-url",
                    "description": "Use Database url to the installation instead of using the options. (Sqlite is not supported)"
                }
            },
            "examples": [
                {
                    "description": "Install a drupal project specifying installation type, language code, database configuration, site name, site email and admin credential settings",
                    "execution": "drupal site:install  standard  \\\n  --langcode=\"en\"  \\\n  --db-type=\"mysql\"  \\\n  --db-host=\"127.0.0.1\"  \\\n  --db-name=\"drupal8\"  \\\n  --db-user=\"u53rn4m3\"  \\\n  --db-pass=\"dbp455\"  \\\n  --db-port=\"3306\"  \\\n  --site-name=\"Drupal 8\"  \\\n  --site-mail=\"admin@example.com\"  \\\n  --account-name=\"admin\"  \\\n  --account-mail=\"admin@example.com\"  \\\n  --account-pass=\"p455w0rd\""
                },
                {
                    "description": "Install a drupal project using a mysql url",
                    "execution": "drupal site:install  standard  mysql:\/\/dbUser:dbPass@dbHost\/dbName \\\n  --langcode=\"en\"  \\\n  --site-name=\"Drupal 8\"  \\\n  --site-mail=\"admin@example.com\"  \\\n  --account-name=\"admin\"  \\\n  --account-mail=\"admin@example.com\"  \\\n  --account-pass=\"p455w0rd\"\n"
                }
            ],
            "aliases": [
                "si"
            ],
            "key": "site.install",
            "dashed": "site-install",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:maintenance",
            "description": "Switch site into maintenance mode",
            "options": [],
            "arguments": {
                "mode": {
                    "name": "mode",
                    "description": "Site maintenance mode [on\/off]"
                }
            },
            "examples": [
                {
                    "description": "Switch on maintenance",
                    "execution": "drupal site:maintenance  on\n"
                },
                {
                    "description": "Switch off maintenance",
                    "execution": "drupal site:maintenance  off\n"
                }
            ],
            "aliases": [
                "sma"
            ],
            "key": "site.maintenance",
            "dashed": "site-maintenance",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:mode",
            "description": "Switch system performance configuration",
            "options": [],
            "arguments": {
                "environment": {
                    "name": "environment",
                    "description": "Environment name [dev, prod]"
                }
            },
            "examples": [
                {
                    "description": "Switch system to prod",
                    "execution": "drupal site:mode  prod"
                },
                {
                    "description": "Switch system to dev",
                    "execution": "drupal site:mode  dev\n"
                }
            ],
            "aliases": [
                "smo"
            ],
            "key": "site.mode",
            "dashed": "site-mode",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:new",
            "description": "Download a new Drupal project",
            "options": {
                "file": {
                    "name": "file",
                    "description": ""
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "site.new",
            "dashed": "site-new",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:statistics",
            "description": "Show the current statistics of website.",
            "options": [],
            "arguments": [],
            "examples": [],
            "aliases": [
                "sst"
            ],
            "key": "site.statistics",
            "dashed": "site-statistics",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "site:status",
            "description": "View current Drupal Installation status",
            "options": {
                "format": {
                    "name": "format",
                    "description": "commands.site.status.options.format"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Get drupal installation status specifying the output format as table",
                    "execution": "drupal site:status  \\\n  --format=\"table\"\n"
                }
            ],
            "aliases": [
                "ss",
                "st"
            ],
            "key": "site.status",
            "dashed": "site-status",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "state:delete",
            "description": "Delete State",
            "options": [],
            "arguments": {
                "name": {
                    "name": "name",
                    "description": "State name."
                }
            },
            "examples": [
                {
                    "description": "Delete state specifying the state name",
                    "execution": "drupal state:delete  comment.maintain_entity_statistics\n"
                }
            ],
            "aliases": [
                "std"
            ],
            "key": "state.delete",
            "dashed": "state-delete",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "state:override",
            "description": "Override a State key.",
            "options": [],
            "arguments": {
                "key": {
                    "name": "key",
                    "description": "The State key to override."
                },
                "value": {
                    "name": "value",
                    "description": "The State value to set."
                }
            },
            "examples": [
                {
                    "description": "Override state value specifying the state name and the new value",
                    "execution": "drupal state:override  comment.node_comment_statistics_scale \"!!float 1\"\n"
                }
            ],
            "aliases": [
                "sto"
            ],
            "key": "state.override",
            "dashed": "state-override",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "taxonomy:term:delete",
            "description": "Delete taxonomy terms from a vocabulary",
            "options": [],
            "arguments": {
                "vid": {
                    "name": "vid",
                    "description": ""
                }
            },
            "examples": [
                {
                    "description": "Delete all terms of the \"tags\" vocabulary",
                    "execution": "drupal taxonomy:term:delete  tags\n"
                }
            ],
            "aliases": [
                "ttd"
            ],
            "key": "taxonomy.term.delete",
            "dashed": "taxonomy-term-delete",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "theme:download",
            "description": "Download theme in application",
            "options": {
                "composer": {
                    "name": "composer",
                    "description": "Use --composer option for manage the theme download with Composer"
                }
            },
            "arguments": {
                "theme": {
                    "name": "theme",
                    "description": "the Theme name"
                },
                "version": {
                    "name": "version",
                    "description": "Theme version i.e 1.x-dev"
                }
            },
            "examples": [
                {
                    "description": "Download theme specifying name and version",
                    "execution": "drupal theme:download  Alina 7.x-1.2\n"
                }
            ],
            "aliases": [
                "thd"
            ],
            "key": "theme.download",
            "dashed": "theme-download",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "theme:install",
            "description": "Install theme or themes in the application",
            "options": {
                "set-default": {
                    "name": "set-default",
                    "description": "Set theme as default theme"
                }
            },
            "arguments": {
                "theme": {
                    "name": "theme",
                    "description": "theme or themes to be installed should be separated by a space"
                }
            },
            "examples": [
                {
                    "description": "Install theme specifying the name",
                    "execution": "drupal theme:install  mytheme\n"
                }
            ],
            "aliases": [
                "thi"
            ],
            "key": "theme.install",
            "dashed": "theme-install",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "theme:path",
            "description": "Returns the relative path to the theme (or absolute path)",
            "options": {
                "absolute": {
                    "name": "absolute",
                    "description": "Return theme absolute path"
                }
            },
            "arguments": {
                "theme": {
                    "name": "theme",
                    "description": "Theme name"
                }
            },
            "examples": [
                {
                    "description": "Get the path of mytheme",
                    "execution": "drupal theme:path  mytheme\n"
                }
            ],
            "aliases": [
                "thp"
            ],
            "key": "theme.path",
            "dashed": "theme-path",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "theme:uninstall",
            "description": "Uninstall theme or themes in the application",
            "options": [],
            "arguments": {
                "theme": {
                    "name": "theme",
                    "description": "theme or themes to be uninstalled should be separated by a space"
                }
            },
            "examples": [
                {
                    "description": "Uninstall theme specifying the name",
                    "execution": "drupal theme:uninstall  mytheme\n"
                }
            ],
            "aliases": [
                "thu"
            ],
            "key": "theme.uninstall",
            "dashed": "theme-uninstall",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "update:entities",
            "description": "Applying Entity Updates",
            "options": [],
            "arguments": [],
            "examples": [
                {
                    "description": "Update entities",
                    "execution": "drupal update:entities\n"
                }
            ],
            "aliases": [
                "upe"
            ],
            "key": "update.entities",
            "dashed": "update-entities",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "update:execute",
            "description": "Execute a specific Update N function in a module, or execute all",
            "options": [],
            "arguments": {
                "module": {
                    "name": "module",
                    "description": "The Module name."
                },
                "update-n": {
                    "name": "update-n",
                    "description": "commands.update.execute.options.update-n"
                }
            },
            "examples": [
                {
                    "description": "Execute all updates",
                    "execution": "drupal update:execute"
                },
                {
                    "description": "Execute updates for system module",
                    "execution": "drupal update:execute system\n"
                }
            ],
            "aliases": [
                "upex",
                "updb"
            ],
            "key": "update.execute",
            "dashed": "update-execute",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:create",
            "description": "Create users for the application",
            "options": {
                "roles": {
                    "name": "roles",
                    "description": "User roles"
                },
                "email": {
                    "name": "email",
                    "description": "User email"
                },
                "status": {
                    "name": "status",
                    "description": "User status"
                }
            },
            "arguments": {
                "username": {
                    "name": "username",
                    "description": "User name to be created"
                },
                "password": {
                    "name": "password",
                    "description": "User password"
                }
            },
            "examples": [
                {
                    "description": "Create user specifying username, password, role, email and status",
                    "execution": "drupal user:create  john p455w0rd  \\\n  --roles='authenticated'  \\\n  --email=\"john@anexusit.com\"  \\\n  --status=\"1\""
                },
                {
                    "description": "Create admin user specifying username, password, role, email and status",
                    "execution": "drupal user:create  doe p455w0rd  \\\n  --roles='administrator'  \\\n  --email=\"doe@anexusit.com\"  \\\n  --status=\"1\"\n"
                }
            ],
            "aliases": [
                "uc"
            ],
            "key": "user.create",
            "dashed": "user-create",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:delete",
            "description": "Delete users from the application",
            "options": {
                "user": {
                    "name": "user",
                    "description": "User name\/id to be deleted"
                },
                "roles": {
                    "name": "roles",
                    "description": "Users with the listed roles to be deleted"
                }
            },
            "arguments": [],
            "examples": [
                {
                    "description": "Delete user with the id number 2",
                    "execution": "drupal user:delete  \\\n  --user=\"2\""
                },
                {
                    "description": "Delete user with the username \"jmolivas\"",
                    "execution": "drupal user:delete  \\\n  --user=\"jmolivas\""
                },
                {
                    "description": "Delete users with the role \"authenticated\"",
                    "execution": "drupal user:delete  \\\n  --role=\"authenticated\"\n"
                }
            ],
            "aliases": [
                "ud"
            ],
            "key": "user.delete",
            "dashed": "user-delete",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:login:clear:attempts",
            "description": "Clear failed login attempts for an account.",
            "options": [],
            "arguments": {
                "user": {
                    "name": "user",
                    "description": "User name\/id."
                }
            },
            "examples": [],
            "aliases": [
                "ulca",
                "uslca"
            ],
            "key": "user.login.clear.attempts",
            "dashed": "user-login-clear-attempts",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:login:url",
            "description": "Returns a one-time user login url.",
            "options": [],
            "arguments": {
                "user": {
                    "name": "user",
                    "description": "User name\/id."
                }
            },
            "examples": [
                {
                    "description": "Get one time login url for user id 10",
                    "execution": "drupal user:login:url  10"
                },
                {
                    "description": "Get one time login url for username jmolivas",
                    "execution": "drupal user:login:url jmolivas"
                }
            ],
            "aliases": [
                "ulu",
                "usli",
                "uli"
            ],
            "key": "user.login.url",
            "dashed": "user-login-url",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:password:hash",
            "description": "Generate a hash from a plaintext password.",
            "options": [],
            "arguments": {
                "password": {
                    "name": "password",
                    "description": "Password(s) in text format"
                }
            },
            "examples": [
                {
                    "description": "Get hash of the word \"p455w0rd\"",
                    "execution": "drupal user:password:hash p455w0rd\n"
                }
            ],
            "aliases": [
                "uph",
                "usph"
            ],
            "key": "user.password.hash",
            "dashed": "user-password-hash",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:password:reset",
            "description": "Reset password for a specific user.",
            "options": [],
            "arguments": {
                "user": {
                    "name": "user",
                    "description": "User name\/id"
                },
                "password": {
                    "name": "password",
                    "description": "Password in text format"
                }
            },
            "examples": [
                {
                    "description": "Update password specifying the user id and the new password",
                    "execution": "drupal user:password:reset 2 p455w0rd"
                },
                {
                    "description": "Update password specifying the user jmolivas and the new password",
                    "execution": "drupal user:password:reset jmolivas p455w0rd\n"
                }
            ],
            "aliases": [
                "upr",
                "upsr"
            ],
            "key": "user.password.reset",
            "dashed": "user-password-reset",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:role",
            "description": "Adds\/removes a role for a given user",
            "options": [],
            "arguments": {
                "operation": {
                    "name": "operation",
                    "description": "Add or remove"
                },
                "user": {
                    "name": "user",
                    "description": "The affected user (only one)"
                },
                "role": {
                    "name": "role",
                    "description": "Roles to add or remove. Please provide the machine name (only one)"
                }
            },
            "examples": [
                {
                    "description": "Add administrator role to the user admin specifying the username and the role",
                    "execution": "drupal user:role  add admin administrator\n"
                },
                {
                    "description": "Remove administrator role from the user admin specifying the username and the role",
                    "execution": "drupal user:role  remove admin administrator\n"
                }
            ],
            "aliases": [
                "ur"
            ],
            "key": "user.role",
            "dashed": "user-role",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "user:unblock",
            "description": "Unblock a specific user.",
            "options": [],
            "arguments": {
                "user": {
                    "name": "user",
                    "description": "User name\/id"
                }
            },
            "examples": [
                {
                    "description": "Unblock user providing the user id",
                    "execution": "drupal user:unblock 2"
                },
                {
                    "description": "Unblock user providing the user name",
                    "execution": "drupal user:unblock johndoe\n"
                }
            ],
            "aliases": [
                "uu"
            ],
            "key": "user.unblock",
            "dashed": "user-unblock",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "version:new",
            "description": "Create new Drupal Console version",
            "options": {
                "file": {
                    "name": "file",
                    "description": ""
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "version.new",
            "dashed": "version-new",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "version:tag:release",
            "description": "Create new Drupal Console tag and release",
            "options": {
                "file": {
                    "name": "file",
                    "description": ""
                }
            },
            "arguments": [],
            "examples": [],
            "aliases": [],
            "key": "version.tag.release",
            "dashed": "version-tag-release",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "views:disable",
            "description": "Disable a View",
            "options": [],
            "arguments": {
                "view-id": {
                    "name": "view-id",
                    "description": "View ID"
                }
            },
            "examples": [
                {
                    "description": "Disable content view",
                    "execution": "drupal views:disable  content\n"
                },
                {
                    "description": "Disable frontpage view",
                    "execution": "drupal views:disable  frontpage\n"
                }
            ],
            "aliases": [
                "vd",
                "vdi"
            ],
            "key": "views.disable",
            "dashed": "views-disable",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        },
        {
            "name": "views:enable",
            "description": "Enable a View",
            "options": [],
            "arguments": {
                "view-id": {
                    "name": "view-id",
                    "description": "View ID"
                }
            },
            "examples": [
                {
                    "description": "Enable content view",
                    "execution": "drupal views:enable  content\n"
                },
                {
                    "description": "Enable frontpage view",
                    "execution": "drupal views:enable  frontpage\n"
                }
            ],
            "aliases": [
                "ve"
            ],
            "key": "views.enable",
            "dashed": "views-enable",
            "messages": {
                "usage": "Usage",
                "options": "Available options",
                "option": "Option",
                "details": "Details",
                "arguments": "Available arguments",
                "argument": "Argument",
                "examples": "Examples"
            }
        }
    ]
}